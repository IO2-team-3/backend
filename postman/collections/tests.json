{
	"info": {
		"_postman_id": "14d80096-f1e0-45cd-bc4b-1aa2f684244e",
		"name": "tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "20887326-14d80096-f1e0-45cd-bc4b-1aa2f684244e"
	},
	"item": [
		{
			"name": "tests Copy",
			"item": [
				{
					"name": "setup-login",
					"item": [
						{
							"name": "get and set session token to env variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a898661-5ed2-4185-a63c-7e9e9cbcbf93",
										"exec": [
											"pm.environment.set('baseUrl', 'http://localhost:5000');\r",
											"var baseUrl = pm.environment.get(\"baseUrl\");\r",
											"\r",
											"function testLogin(done) {\r",
											"  var request = {\r",
											"    method: 'GET',\r",
											"    url: baseUrl + '/organizer/login',\r",
											"    header: {\r",
											"      'Accept': 'application/json',\r",
											"      'Content-Type': 'application/json',\r",
											"      'email': 'io2testmail@gmail.com',\r",
											"      'password': '123'\r",
											"    }\r",
											"  };\r",
											"  console.log(request);\r",
											"  \r",
											"  pm.sendRequest(request, function (err, response) {\r",
											"    if (err) {\r",
											"      console.error('Error:', err);\r",
											"      done(err);\r",
											"    } else {\r",
											"      try {\r",
											"        pm.expect(response.code).to.equal(200);\r",
											"        pm.expect(response.json().sessionToken).to.be.a('string');\r",
											"        pm.environment.set('sessionToken', response.json().sessionToken);\r",
											"        console.log(response);\r",
											"        done();\r",
											"      } catch (e) {\r",
											"        console.error('Error:', e);\r",
											"        done(e);\r",
											"      }\r",
											"    }\r",
											"  });\r",
											"}\r",
											"\r",
											"pm.test('Organizer login', testLogin);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e2a060e9-389c-40a4-bf4a-7353f9030087",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ping",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ping"
									]
								}
							},
							"response": []
						}
					],
					"id": "0c994c7b-b956-4f53-a627-dede49bc2640"
				},
				{
					"name": "reservation",
					"item": [
						{
							"name": "POST: Create new reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8dbb4418-75e6-4916-931a-0b9b9132defe",
										"exec": [
											"var baseUrl = pm.environment.get(\"baseUrl\");\r",
											"\r",
											"// (async function() {\r",
											"//   try {\r",
											"//     console.log(\"---------------------- Tests for POST: Create new reservation: BEGIN ----------------------\");\r",
											"//     const categoryId1 = await addCategories('test category'+(new Date()).getTime());\r",
											"//     eventId = await createEvent(categoryId1);\r",
											"//     // console.log(\"Event ID in main code: \" + eventId);\r",
											"//     console.log(\"test 1\");\r",
											"//     await test1();\r",
											"//     console.log(\"test 2\");\r",
											"//     await test2();\r",
											"//     console.log(\"test 3\");\r",
											"//     await test3();\r",
											"//     console.log(\"test 4\");\r",
											"//     await test4();\r",
											"//     console.log(\"test 5\");\r",
											"//     await test5();\r",
											"//     console.log(\"test 6\");\r",
											"//     await test6();\r",
											"//     console.log(\"test 7\");\r",
											"//     await test7();\r",
											"//     console.log(\"test 8\");\r",
											"//     await test8();\r",
											"//     console.log(\"---------------------- Tests for POST: Create new reservation: END ----------------------\");\r",
											"\r",
											"//   } catch (err) {\r",
											"//     console.error(err);\r",
											"//     throw new Error(err);\r",
											"//   }\r",
											"// })();\r",
											"pm.test(\"Tests for POST: Create new reservation\", async function (done) {\r",
											"  try {\r",
											"    console.log(\"---------------------- Tests for POST: Create new reservation: BEGIN ----------------------\");\r",
											"    const categoryId1 = await addCategories('test category'+(new Date()).getTime());\r",
											"    const eventId = await createEvent(categoryId1);\r",
											"    // console.log(\"Event ID in main code: \" + eventId);\r",
											"    console.log(\"test 1\");\r",
											"    await test1(eventId);\r",
											"    console.log(\"test 2\");\r",
											"    await test2(eventId);\r",
											"    console.log(\"---------------------- Tests for POST: Create new reservation: END ----------------------\");\r",
											"    done();\r",
											"  } catch (err) {\r",
											"    console.error(err);\r",
											"    done(err);\r",
											"  }\r",
											"});\r",
											"\r",
											"function sendRequestAsync(request) {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.sendRequest(request, function(err, response) {\r",
											"      if (err) {\r",
											"        reject(err);\r",
											"      } else {\r",
											"        resolve(response);\r",
											"      }\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"async function addCategories(category) {\r",
											"  return new Promise(async function(resolve, reject) {\r",
											"    await pm.test(\"Create new category\", async function () {\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + '/categories',\r",
											"        header: {\r",
											"          'sessionToken': pm.environment.get(\"sessionToken\"),  \r",
											"          'categoryName': category,\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json'\r",
											"        }\r",
											"      };\r",
											"      try {\r",
											"        const response = await sendRequestAsync(request);\r",
											"        pm.expect(response.code).to.equal(2061);\r",
											"        pm.expect(response.json()).to.have.property('name', category);\r",
											"        pm.expect(response.json().id).to.be.a('number');\r",
											"        resolve(response.json().id);\r",
											"      } catch (err) {\r",
											"        reject(err);\r",
											"      }\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"async function createEvent(category) {\r",
											"  return new Promise(async function(resolve, reject) {\r",
											"    await pm.test(\"Create new event\", async function () {\r",
											"      var request = {\r",
											"        url: baseUrl + '/events',\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"          'sessionToken': pm.environment.get(\"sessionToken\"),\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json'\r",
											"        },\r",
											"        body: {\r",
											"          mode: 'raw',\r",
											"          raw: JSON.stringify({\r",
											"            title: 'TEST EVENT ',\r",
											"            name: 'Jan',\r",
											"            startTime: 111,\r",
											"            endTime: 222,\r",
											"            latitude: 'sadf3',\r",
											"            longitude: '34efs',\r",
											"            maxPlace: 2,\r",
											"            categoriesIds: [category],\r",
											"            placeSchema: 'NO'\r",
											"          })\r",
											"        }\r",
											"      };\r",
											"\r",
											"      try {\r",
											"        const response = await sendRequestAsync(request);\r",
											"        pm.expect(response.code).to.equal(201);\r",
											"        resolve(response.json().eventId); // Return the eventId here\r",
											"      } catch (err) {\r",
											"        reject(err);\r",
											"      }\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"\r",
											"// async function createEvent(category) {\r",
											"//   var request = {\r",
											"//     url: baseUrl+'/events',\r",
											"//     method: 'POST',\r",
											"//     header: {\r",
											"//         'sessionToken': pm.environment.get(\"sessionToken\"),\r",
											"//         'Content-Type': 'application/json',\r",
											"//         'Accept': 'application/json'\r",
											"//     },\r",
											"//     body: {\r",
											"//         mode: 'raw',\r",
											"//         raw: JSON.stringify({\r",
											"//             title: 'TEST EVENT FEEL FREEE TO DELETE IT',\r",
											"//             name: 'Jan',\r",
											"//             startTime: 111,\r",
											"//             endTime: 222,\r",
											"//             latitude: 'sadf3',\r",
											"//             longitude: '34efs',\r",
											"//             maxPlace: 2,\r",
											"//             categoriesIds: [category],\r",
											"//             placeSchema: 'NO'\r",
											"//         })\r",
											"//     }\r",
											"//   };\r",
											"\r",
											"//   try {\r",
											"//     var response = await sendRequestAsync(request);\r",
											"//     pm.expect(response.code).to.equal(201);\r",
											"\r",
											"//     var responseBody = response.json();\r",
											"//     var eventId = responseBody.id;\r",
											"\r",
											"//     return eventId; // Return the eventId here\r",
											"//   } catch (err) {\r",
											"//     console.error(err);\r",
											"//     return null;\r",
											"//   }\r",
											"// }\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"// Test Case 1: Make reservation with valid event ID and place ID\r",
											"function test1(eventId){\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 1: Make reservation with valid event ID and place ID\", function () {\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl+'/reservation',\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json',\r",
											"          'eventId': eventId.toString(),\r",
											"          'placeID': '0'\r",
											"        }\r",
											"      };\r",
											"    pm.sendRequest(request, function (err, response) {\r",
											"        // console.log(response)\r",
											"        if (err) {\r",
											"            reject(err);\r",
											"        } else {\r",
											"            pm.expect(response.code).to.equal(201);\r",
											"            pm.expect(response.json()).to.have.property('reservationToken');\r",
											"            pm.expect(response.json()).to.have.property('placeId', 0);\r",
											"            pm.expect(response.json()).to.have.property('eventId', eventId);\r",
											"            resolve();\r",
											"        }\r",
											"    });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"// Test Case 2: Make reservation with invalid event ID\r",
											"async function test2(){\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.test(\"Test Case 2: Make reservation with invalid event ID\", function () {\r",
											"            var request = {\r",
											"                method: 'POST',\r",
											"                url: baseUrl+ '/reservation',\r",
											"                header: {\r",
											"                    'Content-Type': 'application/json',\r",
											"                    'Accept': 'application/json',\r",
											"                    'eventId': '-1',\r",
											"                    'placeID': '10'\r",
											"                }\r",
											"            };\r",
											"            pm.sendRequest(request, function (err, response) {\r",
											"                if (err) {\r",
											"                    reject(err);\r",
											"                } else {\r",
											"                    pm.expect(response.code).to.equal(404);\r",
											"                    resolve();\r",
											"                }\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"// Test Case 3: Make reservation with no free place\r",
											"function test3(eventId) {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 3: Make reservation with no free place\", function() {\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + '/reservation',\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json',\r",
											"          'eventId': eventId.toString(),\r",
											"          'placeID': '0'\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function(err, response) {\r",
											"        pm.expect(response.code).to.equal(400);\r",
											"        resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"// Test Case 4: Make reservation with missing event ID header\r",
											"function test4() {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 4: Make reservation with missing event ID header\", function() {\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + '/reservation',\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json',\r",
											"          'placeID': '10'\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function(err, response) {\r",
											"        pm.expect(response.code).to.equal(400);\r",
											"        resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"// Test Case 5: Make reservation with invalid place ID\r",
											"function test5(eventId) {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 5: Make reservation with invalid place ID\", function() {\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + '/reservation',\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'eventId': eventId.toString(),\r",
											"          'placeID': '-1'\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function(err, response) {\r",
											"        pm.expect(response.code).to.equal(404);\r",
											"        resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"\r",
											"// Test Case 6: Make reservation with missing headers\r",
											"function test6() {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 6: Make reservation with missing headers\", function () {\r",
											"      var request = {\r",
											"          method: 'POST',\r",
											"          url: baseUrl + '/reservation',\r",
											"          header: {\r",
											"              'Content-Type': 'application/json'\r",
											"          }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"          pm.expect(response.code).to.equal(400);\r",
											"          resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"// Test Case 7: Make reservation without specifed placeId\r",
											"function test7(eventId){\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 7: Make reservation without specifed placeId\", function () {\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl+'/reservation',\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json',\r",
											"          'eventId': eventId.toString()\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"        // console.log(response)\r",
											"        pm.expect(response.code).to.equal(201);\r",
											"        pm.expect(response.json()).to.have.property('reservationToken');\r",
											"        pm.expect(response.json()).to.have.property('placeId');\r",
											"        pm.expect(response.json()).to.have.property('eventId', eventId);\r",
											"        resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"// Test Case 8: Make reservation without specifed placeId, but now there are no more free palces (all are already reserved)\r",
											"function test8(eventId){\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 8: Make reservation without specifed placeId, but now there are no more free palces (all are already reserved)\", function () {\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl+'/reservation',\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json',\r",
											"          'eventId': eventId.toString()\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"        // console.log(response)\r",
											"        pm.expect(response.code).to.equal(404);\r",
											"        resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ad62ce30-6b68-4203-8dc2-c687a0525b18",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ping",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ping"
									]
								}
							},
							"response": []
						},
						{
							"name": "DEL: delete reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0299577-01ac-4ae1-b028-d3efc240e258",
										"exec": [
											"// var baseUrl = pm.environment.get(\"baseUrl\");\r",
											"\r",
											"// (async function() {\r",
											"//   try {\r",
											"//     console.log(\"---------------------- Tests for DEL: delete reservation: BEGIN ----------------------\");\r",
											"//     const categoryId1 = await addCategories('test category'+(new Date()).getTime());\r",
											"//     var eventIdReservationToken = await createEventAndReservation(categoryId1);\r",
											"//     // console.log(\"Event ID in main code: \" + eventIdReservationToken.eventId);\r",
											"//     // console.log(\"reservationToken in main code: \" + eventIdReservationToken.reservationToken);\r",
											"//     console.log(\"test 1\");\r",
											"//     await test1(eventIdReservationToken.reservationToken.toString());\r",
											"//     console.log(\"test 2\");\r",
											"//     await test2();\r",
											"//     console.log(\"test 3\");\r",
											"//     await test3();\r",
											"//     console.log(\"---------------------- Tests for DEL: delete reservation: END ----------------------\");\r",
											"\r",
											"//   } catch (err) {\r",
											"//     console.error(err);\r",
											"//   }\r",
											"// })();\r",
											"\r",
											"// function addCategories(category) {\r",
											"//   return new Promise(function(resolve, reject) {\r",
											"//     pm.test(\"Create new category\", function () {\r",
											"//       var request = {\r",
											"//         method: 'POST',\r",
											"//         url: baseUrl + '/categories',\r",
											"//         header: {\r",
											"//             'categoryName': category,\r",
											"//           'Content-Type': 'application/json',\r",
											"//           'Accept': 'application/json'\r",
											"//         }\r",
											"//       };\r",
											"//       pm.sendRequest(request, function (err, response) {\r",
											"//         pm.expect(response.code).to.equal(201);\r",
											"//         pm.expect(response.json()).to.have.property('name', category);\r",
											"//         pm.expect(response.json().id).to.be.a('number');\r",
											"//         resolve(response.json().id);\r",
											"//       });\r",
											"//     });\r",
											"//   });\r",
											"// }\r",
											"// function sendRequestAsync(request) {\r",
											"//   return new Promise(function(resolve, reject) {\r",
											"//     pm.sendRequest(request, function(err, response) {\r",
											"//       if (err) {\r",
											"//         reject(err);\r",
											"//       } else {\r",
											"//         resolve(response);\r",
											"//       }\r",
											"//     });\r",
											"//   });\r",
											"// }\r",
											"\r",
											"// async function createEvent(categoryId1) {\r",
											"//   var request = {\r",
											"//     url: baseUrl+'/events',\r",
											"//     method: 'POST',\r",
											"//     header: {\r",
											"//         'sessionToken': pm.environment.get(\"sessionToken\"),\r",
											"//         'Content-Type': 'application/json',\r",
											"//         'Accept': 'application/json'\r",
											"//     },\r",
											"//     body: {\r",
											"//         mode: 'raw',\r",
											"//         raw: JSON.stringify({\r",
											"//             title: 'TEST EVENT FEEL FREEE TO DELETE IT',\r",
											"//             name: 'Jan',\r",
											"//             startTime: 111,\r",
											"//             endTime: 222,\r",
											"//             latitude: 'sadf3',\r",
											"//             longitude: '34efs',\r",
											"//             maxPlace: 5,\r",
											"//             categoriesIds: [categoryId1],\r",
											"//             placeSchema: 'NO'\r",
											"//         })\r",
											"//     }\r",
											"//   };\r",
											"\r",
											"//   try {\r",
											"//     var response = await sendRequestAsync(request);\r",
											"//     pm.expect(response.code).to.equal(201);\r",
											"\r",
											"//     var responseBody = response.json();\r",
											"//     var eventId = responseBody.id;\r",
											"\r",
											"//     return eventId; // Return the eventId here\r",
											"//   } catch (err) {\r",
											"//     console.error(err);\r",
											"//     return null;\r",
											"//   }\r",
											"// }\r",
											"\r",
											"// async function createReservation(eventId, placeId) {\r",
											"//   var request = {\r",
											"//     method: 'POST',\r",
											"//     url: baseUrl + '/reservation',\r",
											"//     header: {\r",
											"//       'Content-Type': 'application/json',\r",
											"//       'Accept': 'application/json',\r",
											"//       'eventId': eventId.toString(),\r",
											"//       'placeID': placeId.toString()\r",
											"//     }\r",
											"//   };\r",
											"\r",
											"//   try {\r",
											"//     var response = await sendRequestAsync(request);\r",
											"//     pm.expect(response.code).to.equal(201);\r",
											"\r",
											"//     var responseBody = response.json();\r",
											"//     var reservationToken = responseBody.reservationToken;\r",
											"\r",
											"//     return reservationToken;\r",
											"//   } catch (err) {\r",
											"//     console.error(err);\r",
											"//     return null;\r",
											"//   }\r",
											"// }\r",
											"\r",
											"// async function createEventAndReservation(categoryId1) {\r",
											"//   var eventId;\r",
											"//   var reservationToken;\r",
											"//   try {\r",
											"//     eventId = await createEvent(categoryId1);\r",
											"//     // console.log(\"Event ID : \" + eventId);\r",
											"//     reservationToken = await createReservation(eventId, 0); // Replace 0 with the place ID you want to reserve\r",
											"//     // console.log(\"Reservation token : \" + reservationToken);\r",
											"//     return {\r",
											"//       eventId: eventId,\r",
											"//       reservationToken: reservationToken\r",
											"//     };\r",
											"//   } catch (err) {\r",
											"//     console.error(err);\r",
											"//     return null;\r",
											"//   }\r",
											"// }\r",
											"\r",
											"// // Test Case 1: Delete reservation with valid reservation token\r",
											"// function test1(reservationToken) {\r",
											"//   return new Promise(function(resolve, reject) {\r",
											"//     pm.test(\"Test Case 1: Delete reservation with valid reservation token\", function () {\r",
											"//       var request = {\r",
											"//         method: 'DELETE',\r",
											"//         url: baseUrl + '/reservation',\r",
											"//         header: {\r",
											"//           'Content-Type': 'application/json',\r",
											"//           'Accept': 'application/json',\r",
											"//           'reservationToken': reservationToken\r",
											"//         }\r",
											"//       };\r",
											"//       pm.sendRequest(request, function (err, response) {\r",
											"//         pm.expect(response.code).to.equal(204);\r",
											"//         resolve();\r",
											"//       });\r",
											"//     });\r",
											"//   });\r",
											"// }\r",
											"\r",
											"// // Test Case 2: Delete reservation with invalid reservation token\r",
											"// function test2() {\r",
											"//   return new Promise(function(resolve, reject) {\r",
											"//     pm.test(\"Test Case 2: Delete reservation with invalid reservation token\", function () {\r",
											"//       var request = {\r",
											"//         method: 'DELETE',\r",
											"//         url: baseUrl + '/reservation',\r",
											"//         header: {\r",
											"//           'Content-Type': 'application/json',\r",
											"//           'Accept': 'application/json',\r",
											"//           'reservationToken': 'invalid_token'\r",
											"//         }\r",
											"//       };\r",
											"//       pm.sendRequest(request, function (err, response) {\r",
											"//         pm.expect(response.code).to.equal(404);\r",
											"//         resolve();\r",
											"//       });\r",
											"//     });\r",
											"//   });\r",
											"// }\r",
											"\r",
											"// // Test Case 3: Delete reservation with missing reservationToken header\r",
											"// function test3() {\r",
											"//   return new Promise(function(resolve, reject) {\r",
											"//     pm.test(\"Test Case 3: Delete reservation with missing reservationToken header\", function () {\r",
											"//       var request = {\r",
											"//         method: 'DELETE',\r",
											"//         url: baseUrl + '/reservation',\r",
											"//         header: {\r",
											"//           'Content-Type': 'application/json',\r",
											"//           'Accept': 'application/json'\r",
											"//         }\r",
											"//       };\r",
											"//       pm.sendRequest(request, function (err, response) {\r",
											"//         pm.expect(response.code).to.equal(400);\r",
											"//         resolve();\r",
											"//       });\r",
											"//     });\r",
											"//   });\r",
											"// }\r",
											"\r",
											"var baseUrl = pm.environment.get(\"baseUrl\");\r",
											"\r",
											"console.log(\"---------------------- Tests for DEL: delete reservation: BEGIN ----------------------\");\r",
											"\r",
											"addCategories('test category'+(new Date()).getTime(), function(categoryId1) {\r",
											"  createEventAndReservation(categoryId1, function(eventIdReservationToken) {\r",
											"    \r",
											"    console.log(\"test 1\");\r",
											"    testDeleteReservationWithValidToken(eventIdReservationToken.reservationToken.toString(), function() {\r",
											"      \r",
											"      console.log(\"test 2\");\r",
											"      testDeleteReservationWithInvalidToken(function() {\r",
											"        \r",
											"        console.log(\"test 3\");\r",
											"        testDeleteReservationWithMissingTokenHeader(function() {\r",
											"          \r",
											"          console.log(\"---------------------- Tests for DEL: delete reservation: END ----------------------\");\r",
											"          \r",
											"        });\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"});\r",
											"\r",
											"function addCategories(category, callback) {\r",
											"  pm.test(\"Create new category\", function () {\r",
											"    var request = {\r",
											"      method: 'POST',\r",
											"      url: baseUrl + '/categories',\r",
											"      header: {\r",
											"          'categoryName': category,\r",
											"        'Content-Type': 'application/json',\r",
											"        'Accept': 'application/json'\r",
											"      }\r",
											"    };\r",
											"    pm.sendRequest(request, function (err, response) {\r",
											"      if (err) {\r",
											"        console.error(err);\r",
											"      } else {\r",
											"        pm.expect(response.code).to.equal(201);\r",
											"        pm.expect(response.json()).to.have.property('name', category);\r",
											"        pm.expect(response.json().id).to.be.a('number');\r",
											"      }\r",
											"      callback(response.json().id);\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"function createEvent(categoryId1, callback) {\r",
											"  var request = {\r",
											"    url: baseUrl+'/events',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'sessionToken': pm.environment.get(\"sessionToken\"),\r",
											"        'Content-Type': 'application/json',\r",
											"        'Accept': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            title: 'TEST EVENT FEEL FREEE TO DELETE IT',\r",
											"            name: 'Jan',\r",
											"            startTime: 111,\r",
											"            endTime: 222,\r",
											"            latitude: 'sadf3',\r",
											"            longitude: '34efs',\r",
											"            maxPlace: 5,\r",
											"            categoriesIds: [categoryId1],\r",
											"            placeSchema: 'NO'\r",
											"        })\r",
											"    }\r",
											"  };\r",
											"\r",
											"  pm.sendRequest(request, function (err, response) {\r",
											"    if (err) {\r",
											"      console.error(err);\r",
											"      callback(null);\r",
											"    } else {\r",
											"      pm.expect(response.code).to.equal(201);\r",
											"      var responseBody = response.json();\r",
											"      var eventId = responseBody.id;\r",
											"      callback(eventId);\r",
											"    }\r",
											"  });\r",
											"}\r",
											"\r",
											"function createReservation(eventId, placeId, callback) {\r",
											"  var request = {\r",
											"    method: 'POST',\r",
											"    url: baseUrl + '/reservation',\r",
											"    header: {\r",
											"      'Content-Type': 'application/json',\r",
											"      'Accept': 'application/json',\r",
											"      'eventId': eventId.toString(),\r",
											"      'placeID': placeId.toString()\r",
											"    }\r",
											"  };\r",
											"\r",
											"  pm.sendRequest(request, function (err, response) {\r",
											"    if (err) {\r",
											"      console.error(err);\r",
											"      callback(null);\r",
											"    } else {\r",
											"      pm.expect(response.code).to.equal(201);\r",
											"      var responseBody = response.json();\r",
											"      var reservationToken = responseBody.reservationToken;\r",
											"      callback(reservationToken);\r",
											"    }\r",
											"  });\r",
											"}\r",
											"\r",
											"function createEventAndReservation(categoryId1, callback) {\r",
											"  createEvent(categoryId1, function(eventId) {\r",
											"    createReservation(eventId, 0, function(reservationToken) {\r",
											"      callback({\r",
											"        eventId: eventId,\r",
											"        reservationToken: reservationToken\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"// Test Case 1: Delete reservation with valid reservation token\r",
											"function testDeleteReservationWithValidToken(reservationToken, callback) {\r",
											"  pm.test(\"Test Case 1: Delete reservation with valid reservation token\", function () {\r",
											"    var request = {\r",
											"      method: 'DELETE',\r",
											"      url: baseUrl + '/reservation',\r",
											"      header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Accept': 'application/json',\r",
											"        'reservationToken': reservationToken\r",
											"      }\r",
											"    };\r",
											"    pm.sendRequest(request, function (err, response) {\r",
											"      if (err) {\r",
											"        console.error(err);\r",
											"      } else {\r",
											"        pm.expect(response.code).to.equal(204);\r",
											"      }\r",
											"      callback();\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"// Test Case 2: Delete reservation with invalid reservation token\r",
											"function testDeleteReservationWithInvalidToken(callback) {\r",
											"  pm.test(\"Test Case 2: Delete reservation with invalid reservation token\", function () {\r",
											"    var request = {\r",
											"      method: 'DELETE',\r",
											"      url: baseUrl + '/reservation',\r",
											"      header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Accept': 'application/json',\r",
											"        'reservationToken': 'invalid_token'\r",
											"      }\r",
											"    };\r",
											"    pm.sendRequest(request, function (err, response) {\r",
											"      if (err) {\r",
											"        console.error(err);\r",
											"      } else {\r",
											"        pm.expect(response.code).to.equal(404);\r",
											"      }\r",
											"      callback();\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"// Test Case 3: Delete reservation with missing reservationToken header\r",
											"function testDeleteReservationWithMissingTokenHeader(callback) {\r",
											"  pm.test(\"Test Case 3: Delete reservation with missing reservationToken header\", function () {\r",
											"    var request = {\r",
											"      method: 'DELETE',\r",
											"      url: baseUrl + '/reservation',\r",
											"      header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'Accept': 'application/json'\r",
											"      }\r",
											"    };\r",
											"    pm.sendRequest(request, function (err, response) {\r",
											"      if (err) {\r",
											"        console.error(err);\r",
											"      } else {\r",
											"        pm.expect(response.code).to.equal(400);\r",
											"      }\r",
											"      callback();\r",
											"    });\r",
											"  });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e37779bc-c340-4d47-a83b-22f491e7613b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ping",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ping"
									]
								}
							},
							"response": []
						}
					],
					"id": "c501514a-5915-4390-ba23-184c67ac77bd"
				},
				{
					"name": "oganizer",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "TODO: POST: Confirm orginizer account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52a33861-1e41-4af5-b5d2-abbb9edc40ae",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "38eadf3f-388d-497c-91f7-fda4d70ab223",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/ping",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ping"
											]
										}
									},
									"response": []
								},
								{
									"name": "TODO: DEL: Confirm orginizer account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2bb4b482-e2dc-4f69-8a51-f3648f4da5c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "49084bc7-c3e5-4f36-bf4e-d23c68e863b6",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/ping",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ping"
											]
										}
									},
									"response": []
								},
								{
									"name": "TODO: PATCH: Patch orginizer account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15e76d3f-d643-4a20-a4a3-f665b3f076c2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "33448658-32a9-413a-bee0-c53c6e0398da",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/ping",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"id": "862e878a-895b-4dc4-9622-74dc7c615869"
						},
						{
							"name": "login",
							"item": [
								{
									"name": "TODO: GET: Logs organizer into the system",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a723732a-d1e4-434f-b81c-be617385e32a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "00364bb1-d415-4f6f-b3c0-bac2d4e31655",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/ping",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"id": "8b23c7da-98db-4976-ac13-3e77bed9ff6a"
						},
						{
							"name": "TODO: POST: Create orginizer account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "863c2183-42bf-42a3-8797-f833076662f3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "eb9da05a-8ef9-4801-8129-e6e41fb5ee1a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ping",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ping"
									]
								}
							},
							"response": []
						},
						{
							"name": "TODO: GET: Get organizer account (my account)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2d438df-59a5-472d-b911-e7b18127b21a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3485bbed-c262-4032-b902-cf6ab6baa44e",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ping",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ping"
									]
								}
							},
							"response": []
						}
					],
					"id": "d33202bc-ea2e-49d5-9562-15c568078f8c"
				},
				{
					"name": "event",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "GET: Find event by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8c812d3-f721-4436-8463-35b5fb21fa68",
												"exec": [
													"// var baseUrl = pm.environment.get(\"baseUrl\");\r",
													"\r",
													"// (async function() {\r",
													"\r",
													"//   try {\r",
													"//     console.log(\"---------------------- Tests for GET: Find event by ID: BEGIN ----------------------\");\r",
													"//     console.log(\"test 1\");\r",
													"//     const categoryId1 = await addCategories('test category'+(new Date()).getTime());\r",
													"//     await test1(categoryId1);\r",
													"//     console.log(\"test 2\");\r",
													"//     await test2();\r",
													"//     console.log(\"test 3\");\r",
													"//     await test3();\r",
													"//     console.log(\"---------------------- Tests for GET: Find event by ID: END ----------------------\");\r",
													"\r",
													"//   } catch (err) {\r",
													"//     console.error(err);\r",
													"//   }\r",
													"// })();\r",
													"\r",
													"// function sendRequestAsync(request) {\r",
													"//   return new Promise(function(resolve, reject) {\r",
													"//     pm.sendRequest(request, function(err, response) {\r",
													"//       if (err) {\r",
													"//         reject(err);\r",
													"//       } else {\r",
													"//         resolve(response);\r",
													"//       }\r",
													"//     });\r",
													"//   });\r",
													"// }\r",
													"\r",
													"// function addCategories(category) {\r",
													"//   return new Promise(function(resolve, reject) {\r",
													"//     pm.test(\"Create new category\", function () {\r",
													"//       var request = {\r",
													"//         method: 'POST',\r",
													"//         url: baseUrl + '/categories',\r",
													"//         header: {\r",
													"//             'categoryName': category,\r",
													"//           'Content-Type': 'application/json',\r",
													"//           'Accept': 'application/json'\r",
													"//         }\r",
													"//       };\r",
													"//       pm.sendRequest(request, function (err, response) {\r",
													"//         pm.expect(response.code).to.equal(201);\r",
													"//         pm.expect(response.json()).to.have.property('name', category);\r",
													"//         pm.expect(response.json().id).to.be.a('number');\r",
													"//         resolve(response.json().id);\r",
													"//       });\r",
													"//     });\r",
													"//   });\r",
													"// }\r",
													"\r",
													"// // pm.test(\"Test Case 1: Get event by ID with valid ID\", function (done) {\r",
													"// //   // Create a new event to get by ID\r",
													"// //   var createRequest = {\r",
													"// //         method: 'POST',\r",
													"// //         url: baseUrl + '/events',\r",
													"// //         header: {\r",
													"// //           'Content-Type': 'application/json',\r",
													"// //           'Accept': 'application/json',\r",
													"// //           'sessionToken': pm.environment.get(\"sessionToken\")\r",
													"// //         },\r",
													"// //         body: {\r",
													"// //           mode: 'raw',\r",
													"// //           raw: JSON.stringify({\r",
													"// //             title: 'Test Event',\r",
													"// //             name: 'John',\r",
													"// //             startTime: 1649389200, // January 6, 2023 10:00:00 AM GMT\r",
													"// //             endTime: 1649392800, // January 6, 2023 11:00:00 AM GMT\r",
													"// //             latitude: '123.456',\r",
													"// //             longitude: '78.90',\r",
													"// //             maxPlace: 10,\r",
													"// //             categoriesIds: [category],\r",
													"// //             placeSchema: 'NO'\r",
													"// //           })\r",
													"// //         }\r",
													"// //       };\r",
													"  \r",
													"// //   pm.sendRequest(createRequest, function (err, createResponse) {\r",
													"// //     // Error handling\r",
													"// //     if (err) {\r",
													"// //       console.error(err);\r",
													"// //       done(err);\r",
													"// //       return;\r",
													"// //     }\r",
													"    \r",
													"// //      pm.expect(response.code).to.equal(201);\r",
													"\r",
													"// //         var eventId = response.json().id;\r",
													"// //         // Get the event by ID\r",
													"// //         var getRequest = {\r",
													"// //           method: 'GET',\r",
													"// //           url: baseUrl + '/events/' + eventId,\r",
													"// //           header: {\r",
													"// //             'Accept': 'application/json'\r",
													"// //           }\r",
													"// //         };\r",
													"\r",
													"// //     // Get the event by ID\r",
													"// //      var getRequest = {\r",
													"// //           method: 'GET',\r",
													"// //           url: baseUrl + '/events/' + eventId,\r",
													"// //           header: {\r",
													"// //             'Accept': 'application/json'\r",
													"// //           }\r",
													"// //         };\r",
													"\r",
													"// //     pm.sendRequest(getRequest, function (err, getResponse) {\r",
													"// //       // Error handling\r",
													"// //       if (err) {\r",
													"// //         console.error(err);\r",
													"// //         done(err);\r",
													"// //         return;\r",
													"// //       }\r",
													"\r",
													"// //         pm.expect(response.code).to.equal(200);\r",
													"// //           pm.expect(response.json()).to.have.property('title', 'Test Event');\r",
													"// //           pm.expect(response.json()).to.have.property('name', 'John');\r",
													"// //           pm.expect(response.json()).to.have.property('startTime', 1649389200);\r",
													"// //           pm.expect(response.json()).to.have.property('endTime', 1649392800);\r",
													"// //           pm.expect(response.json()).to.have.property('latitude', '123.456');\r",
													"// //           pm.expect(response.json()).to.have.property('longitude', '78.90');\r",
													"// //           pm.expect(response.json()).to.have.property('maxPlace', 10);\r",
													"// //           pm.expect(response.json()).to.have.property('status', 'inFuture');\r",
													"// //           // pm.expect(response.json()).to.have.property('categoriesIds').that.includes(1);\r",
													"// //           // pm.expect(response.json()).to.have.property('categoriesIds').that.includes(2);\r",
													"// //           pm.expect(response.json()).to.have.property('placeSchema', 'NO');\r",
													"\r",
													"// //       done();\r",
													"// //     });\r",
													"// //   });\r",
													"// // });\r",
													"\r",
													"\r",
													"// // Test Case 1: Get event by ID with valid ID\r",
													"// function test1(category) {\r",
													"//   return new Promise(function(resolve, reject) {\r",
													"//     pm.test(\"Test Case 1: Get event by ID with valid ID\", function () {\r",
													"//       // Create a new event to get by ID\r",
													"//       var createRequest = {\r",
													"//         method: 'POST',\r",
													"//         url: baseUrl + '/events',\r",
													"//         header: {\r",
													"//           'Content-Type': 'application/json',\r",
													"//           'Accept': 'application/json',\r",
													"//           'sessionToken': pm.environment.get(\"sessionToken\")\r",
													"//         },\r",
													"//         body: {\r",
													"//           mode: 'raw',\r",
													"//           raw: JSON.stringify({\r",
													"//             title: 'Test Event',\r",
													"//             name: 'John',\r",
													"//             startTime: 1649389200, // January 6, 2023 10:00:00 AM GMT\r",
													"//             endTime: 1649392800, // January 6, 2023 11:00:00 AM GMT\r",
													"//             latitude: '123.456',\r",
													"//             longitude: '78.90',\r",
													"//             maxPlace: 10,\r",
													"//             categoriesIds: [category],\r",
													"//             placeSchema: 'NO'\r",
													"//           })\r",
													"//         }\r",
													"//       };\r",
													"//       pm.sendRequest(createRequest, function (err, response) {\r",
													"//            if (err) {\r",
													"//         reject(err);\r",
													"//       } else {\r",
													"//         pm.expect(response.code).to.equal(201);\r",
													"\r",
													"//         var eventId = response.json().id;\r",
													"//         // Get the event by ID\r",
													"//         var getRequest = {\r",
													"//           method: 'GET',\r",
													"//           url: baseUrl + '/events/' + eventId,\r",
													"//           header: {\r",
													"//             'Accept': 'application/json'\r",
													"//           }\r",
													"//         };\r",
													"\r",
													"//         pm.sendRequest(getRequest, function (err, response) {\r",
													"//            if (err) {\r",
													"//         reject(err);\r",
													"//         } else {\r",
													"//           pm.expect(response.code).to.equal(200);\r",
													"//           pm.expect(response.json()).to.have.property('title', 'Test Event');\r",
													"//           pm.expect(response.json()).to.have.property('name', 'John');\r",
													"//           pm.expect(response.json()).to.have.property('startTime', 1649389200);\r",
													"//           pm.expect(response.json()).to.have.property('endTime', 1649392800);\r",
													"//           pm.expect(response.json()).to.have.property('latitude', '123.456');\r",
													"//           pm.expect(response.json()).to.have.property('longitude', '78.90');\r",
													"//           pm.expect(response.json()).to.have.property('maxPlace', 10);\r",
													"//           pm.expect(response.json()).to.have.property('status', 'inFuture');\r",
													"//           // pm.expect(response.json()).to.have.property('categoriesIds').that.includes(1);\r",
													"//           // pm.expect(response.json()).to.have.property('categoriesIds').that.includes(2);\r",
													"//           pm.expect(response.json()).to.have.property('placeSchema', 'NO');\r",
													"//           resolve();\r",
													"//         }\r",
													"//         });\r",
													"//       }\r",
													"//       });\r",
													"//     });\r",
													"//   });\r",
													"// }\r",
													"\r",
													"// // Test Case 2: Attempt to get event by invalid ID\r",
													"// function test2() {\r",
													"//   return new Promise(function(resolve, reject) {\r",
													"//     pm.test(\"Test Case 2: Attempt to get event by invalid ID\", function () {\r",
													"//       var request = {\r",
													"//         method: 'GET',\r",
													"//         url: baseUrl + '/events/' + 'invalid_id',\r",
													"//         header: {\r",
													"//           'Accept': 'application/json'\r",
													"//         }\r",
													"//       };\r",
													"//       pm.sendRequest(request, function (err, response) {\r",
													"//         pm.expect(response.code).to.equal(400);\r",
													"//         resolve();\r",
													"//       });\r",
													"//     });\r",
													"//   });\r",
													"// }\r",
													"\r",
													"// // Test Case 3: Attempt to get non-existent event\r",
													"// function test3() {\r",
													"//   return new Promise(function(resolve, reject) {\r",
													"//     pm.test(\"Test Case 3: Attempt to get non-existent event\", function () {\r",
													"//       var request = {\r",
													"//         method: 'GET',\r",
													"//         url: baseUrl + '/events/-1', // Use a non-existent event ID\r",
													"//         header: {\r",
													"//           'Accept': 'application/json'\r",
													"//         }\r",
													"//       };\r",
													"//       pm.sendRequest(request, function (err, response) {\r",
													"//         pm.expect(response.code).to.equal(404);\r",
													"//         resolve();\r",
													"//       });\r",
													"//     });\r",
													"//   });\r",
													"// }\r",
													"\r",
													"\r",
													"var baseUrl = pm.environment.get(\"baseUrl\");\r",
													"\r",
													"console.log(\"---------------------- Tests for GET: Find event by ID: BEGIN ----------------------\");\r",
													"\r",
													"addCategories('test category'+(new Date()).getTime(), function(categoryId1) {\r",
													"  console.log(\"test 1\");\r",
													"  test1(categoryId1, function() {\r",
													"    console.log(\"test 2\");\r",
													"    test2(function() {\r",
													"      console.log(\"test 3\");\r",
													"      test3(function() {\r",
													"        console.log(\"---------------------- Tests for GET: Find event by ID: END ----------------------\");\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"});\r",
													"\r",
													"function addCategories(category, callback) {\r",
													"  pm.test(\"Create new category\", function () {\r",
													"    var request = {\r",
													"      method: 'POST',\r",
													"      url: baseUrl + '/categories',\r",
													"      header: {\r",
													"          'categoryName': category,\r",
													"        'Content-Type': 'application/json',\r",
													"        'Accept': 'application/json'\r",
													"      }\r",
													"    };\r",
													"    pm.sendRequest(request, function (err, response) {\r",
													"      if (err) {\r",
													"        console.error(err);\r",
													"      } else {\r",
													"        pm.expect(response.code).to.equal(201);\r",
													"        pm.expect(response.json()).to.have.property('name', category);\r",
													"        pm.expect(response.json().id).to.be.a('number');\r",
													"      }\r",
													"      callback(response.json().id);\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"function test1(category, callback) {\r",
													"  pm.test(\"Test Case 1: Get event by ID with valid ID\", function () {\r",
													"    var createRequest = {\r",
													"      method: 'POST',\r",
													"      url: baseUrl + '/events',\r",
													"      header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'Accept': 'application/json',\r",
													"        'sessionToken': pm.environment.get(\"sessionToken\")\r",
													"      },\r",
													"      body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"          title: 'Test Event',\r",
													"          name: 'John',\r",
													"          startTime: 1649389200,\r",
													"          endTime: 1649392800,\r",
													"          latitude: '123.456',\r",
													"          longitude: '78.90',\r",
													"          maxPlace: 10,\r",
													"          categoriesIds: [category],\r",
													"          placeSchema: 'NO'\r",
													"        })\r",
													"      }\r",
													"    };\r",
													"    pm.sendRequest(createRequest, function (err, response) {\r",
													"      if (err) {\r",
													"        console.error(err);\r",
													"        callback();\r",
													"      } else {\r",
													"        pm.expect(response.code).to.equal(201);\r",
													"        var eventId = response.json().id;\r",
													"\r",
													"        var getRequest = {\r",
													"          method: 'GET',\r",
													"          url: baseUrl + '/events/' + eventId,\r",
													"          header: {\r",
													"            'Accept': 'application/json'\r",
													"          }\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(getRequest, function (err, response) {\r",
													"          if (err) {\r",
													"            console.error(err);\r",
													"          } else {\r",
													"            pm.expect(response.code).to.equal(200);\r",
													"            pm.expect(response.json()).to.have.property('title', 'Test Event');\r",
													"            pm.expect(response.json()).to.have.property('name', 'John');\r",
													"            pm.expect(response.json()).to.have.property('startTime', 1649389200);\r",
													"            pm.expect(response.json()).to.have.property('endTime', 1649392800);\r",
													"            pm.expect(response.json()).to.have.property('latitude', '123.456');\r",
													"            pm.expect(response.json()).to.have.property('longitude', '78.90');\r",
													"            pm.expect(response.json()).to.have.property('maxPlace', 10);\r",
													"            pm.expect(response.json()).to.have.property('status', 'inFuture');\r",
													"            pm.expect(response.json()).to.have.property('placeSchema', 'NO');\r",
													"          }\r",
													"          callback();\r",
													"        });\r",
													"      }\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"function test2(callback) {\r",
													"  pm.test(\"Test Case 2: Attempt to get event by invalid ID\", function () {\r",
													"    var request = {\r",
													"      method: 'GET',\r",
													"      url: baseUrl + '/events/' + 'invalid_id',\r",
													"      header: {\r",
													"        'Accept': 'application/json'\r",
													"      }\r",
													"    };\r",
													"    pm.sendRequest(request, function (err, response) {\r",
													"      if (err) {\r",
													"        console.error(err);\r",
													"      } else {\r",
													"        pm.expect(response.code).to.equal(400);\r",
													"      }\r",
													"      callback();\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"function test3(callback) {\r",
													"  pm.test(\"Test Case 3: Attempt to get non-existent event\", function () {\r",
													"    var request = {\r",
													"      method: 'GET',\r",
													"      url: baseUrl + '/events/-1', // Use a non-existent event ID\r",
													"      header: {\r",
													"        'Accept': 'application/json'\r",
													"      }\r",
													"    };\r",
													"    pm.sendRequest(request, function (err, response) {\r",
													"      if (err) {\r",
													"        console.error(err);\r",
													"      } else {\r",
													"        pm.expect(response.code).to.equal(404);\r",
													"      }\r",
													"      callback();\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "ab0462c4-fcff-496e-9ca7-bba54ab2a4d4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/ping",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ping"
											]
										}
									},
									"response": []
								},
								{
									"name": "DEL: Cancel Event",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c90363e-1c58-4e91-9e71-f43e19ff219e",
												"exec": [
													"var baseUrl = pm.environment.get(\"baseUrl\");\r",
													"\r",
													"(async function() {\r",
													"  try {\r",
													"    console.log(\"---------------------- Tests for DEL: Cancel Event: BEGIN ----------------------\");\r",
													"    console.log(\"test 1\");\r",
													"    const categoryId1 = await addCategories('test category'+(new Date()).getTime());\r",
													"    await test1(categoryId1);\r",
													"    console.log(\"test 2\");\r",
													"    await test2();\r",
													"    console.log(\"test 3 (invesetigate)\");\r",
													"    // await test3(categoryId1); // similar BUG, returns 500, but what should it return idk, nothing about it in documentations\r",
													"    console.log(\"---------------------- Tests for DEL: Cancel Event: END ----------------------\");\r",
													"\r",
													"  } catch (err) {\r",
													"    console.error(err);\r",
													"  }\r",
													"})();\r",
													"\r",
													"function sendRequestAsync(request) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.sendRequest(request, function(err, response) {\r",
													"      if (err) {\r",
													"        reject(err);\r",
													"      } else {\r",
													"        resolve(response);\r",
													"      }\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"function addCategories(category) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Create new category\", function () {\r",
													"      var request = {\r",
													"        method: 'POST',\r",
													"        url: baseUrl + '/categories',\r",
													"        header: {\r",
													"            'categoryName': category,\r",
													"          'Content-Type': 'application/json',\r",
													"          'Accept': 'application/json'\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(request, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(201);\r",
													"        pm.expect(response.json()).to.have.property('name', category);\r",
													"        pm.expect(response.json().id).to.be.a('number');\r",
													"        resolve(response.json().id);\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"// Test Case 1: Cancel existing event\r",
													"function test1(category) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Test Case 1: Cancel existing event\", function () {\r",
													"      // Create a new event to cancel\r",
													"      var createRequest = {\r",
													"        method: 'POST',\r",
													"        url: baseUrl + '/events',\r",
													"        header: {\r",
													"          'Content-Type': 'application/json',\r",
													"          'Accept': 'application/json',\r",
													"          'sessionToken': pm.environment.get(\"sessionToken\")\r",
													"        },\r",
													"        body: {\r",
													"          mode: 'raw',\r",
													"          raw: JSON.stringify({\r",
													"            title: 'Test Event',\r",
													"            name: 'John',\r",
													"            startTime: 1649389200, // January 6, 2023 10:00:00 AM GMT\r",
													"            endTime: 1649392800, // January 6, 2023 11:00:00 AM GMT\r",
													"            latitude: '123.456',\r",
													"            longitude: '78.90',\r",
													"            maxPlace: 10,\r",
													"            categoriesIds: [category],\r",
													"            placeSchema: 'NO'\r",
													"          })\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(createRequest, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(201);\r",
													"        var eventID = response.json().id;\r",
													"        // Cancel the event\r",
													"        var cancelRequest = {\r",
													"          method: 'DELETE',\r",
													"          url: baseUrl + '/events/' + eventID,\r",
													"          header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'Accept': 'application/json',\r",
													"            'sessionToken': pm.environment.get(\"sessionToken\")\r",
													"          }\r",
													"        };\r",
													"        pm.sendRequest(cancelRequest, function (err, response) {\r",
													"          pm.expect(response.code).to.equal(204);\r",
													"          resolve();\r",
													"        });\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"// Test Case 2: Attempt to cancel non-existing event\r",
													"function test2() {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Test Case 2: Attempt to cancel non-existing event\", function () {\r",
													"      var request = {\r",
													"        method: 'DELETE',\r",
													"        url: baseUrl + '/events/12345', // Non-existing event ID\r",
													"        header: {\r",
													"          'Content-Type': 'application/json',\r",
													"          'Accept': 'application/json',\r",
													"          'sessionToken': pm.environment.get(\"sessionToken\")\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(request, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(404); \r",
													"        resolve();\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"// Test Case 3: Attempt to cancel event with invalid session token\r",
													"function test3(categoryId1) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Test Case 3: Attempt to cancel event with invalid session token\", function () {\r",
													"      // Create a new event to cancel\r",
													"      var createRequest = {\r",
													"        method: 'POST',\r",
													"        url: baseUrl + '/events',\r",
													"        header: {\r",
													"          'Content-Type': 'application/json',\r",
													"          'Accept': 'application/json',\r",
													"          'sessionToken': pm.environment.get(\"sessionToken\")\r",
													"        },\r",
													"        body: {\r",
													"          mode: 'raw',\r",
													"          raw: JSON.stringify({\r",
													"            title: 'Test Event',\r",
													"            name: 'John',\r",
													"            startTime: 1649389200, // January 6, 2023 10:00:00 AM GMT\r",
													"            endTime: 1649392800, // January 6, 2023 11:00:00 AM GMT\r",
													"            latitude: '123.456',\r",
													"            longitude: '78.90',\r",
													"            maxPlace: 10,\r",
													"            categoriesIds: [categoryId1],\r",
													"            placeSchema: 'NO'\r",
													"          })\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(createRequest, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(201);\r",
													"        var eventId = response.json().id;\r",
													"        // Try to cancel the event with an invalid session token\r",
													"        var cancelRequest = {\r",
													"          method: 'DELETE',\r",
													"          url: baseUrl + '/events/' + eventId,\r",
													"          header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'Accept': 'application/json',\r",
													"            'sessionToken': 'invalidSessionToken'\r",
													"          }\r",
													"        };\r",
													"        pm.sendRequest(cancelRequest, function (err, response) {\r",
													"          pm.expect(response.code).to.equal(403); // Expected response code is 404 (not found)\r",
													"          resolve();\r",
													"        });\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "f5b8f52d-2e14-47c9-b645-895d8ae3c04a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/ping",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ping"
											]
										}
									},
									"response": []
								},
								{
									"name": "PATCH: patch existing event",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5cc3f34-0b04-4963-be37-ac9d2ad12925",
												"exec": [
													"var baseUrl = pm.environment.get(\"baseUrl\");\r",
													"\r",
													"(async function() {\r",
													"  try {\r",
													"    console.log(\"---------------------- Tests for PATCH: patch existing event: BEGIN ----------------------\");\r",
													"    const categoryId1 = await addCategories('test category'+(new Date()).getTime());\r",
													"    eventId = await createEvent(categoryId1)\r",
													"    console.log(\"test 1\");\r",
													"    await test1(eventId);\r",
													"    console.log(\"test 2\");\r",
													"    await test2();\r",
													"    console.log(\"test 3 fixtest -> return good erron on invalid sessionToken\");\r",
													"    // await test3(eventId);\r",
													"    console.log(\"test 4\");\r",
													"    await test4(eventId);\r",
													"    console.log(\"test 5\");\r",
													"    await test5(eventId);\r",
													"    console.log(\"---------------------- Tests for PATCH: patch existing event: END ----------------------\");\r",
													"\r",
													"  } catch (err) {\r",
													"    console.error(err);\r",
													"  }\r",
													"})();\r",
													"\r",
													"function sendRequestAsync(request) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.sendRequest(request, function(err, response) {\r",
													"      if (err) {\r",
													"        reject(err);\r",
													"      } else {\r",
													"        resolve(response);\r",
													"      }\r",
													"    });\r",
													"  });\r",
													"}\r",
													"function addCategories(category) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Create new category\", function () {\r",
													"      var request = {\r",
													"        method: 'POST',\r",
													"        url: baseUrl + '/categories',\r",
													"        header: {\r",
													"            'categoryName': category,\r",
													"          'Content-Type': 'application/json',\r",
													"          'Accept': 'application/json'\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(request, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(201);\r",
													"        pm.expect(response.json()).to.have.property('name', category);\r",
													"        pm.expect(response.json().id).to.be.a('number');\r",
													"        resolve(response.json().id);\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"async function createEvent(category) {\r",
													"  var request = {\r",
													"    url: baseUrl+'/events',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'sessionToken': pm.environment.get(\"sessionToken\"),\r",
													"        'Content-Type': 'application/json',\r",
													"        'Accept': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            title: 'TEST EVENT FEEL FREEE TO DELETE IT',\r",
													"            name: 'Jan',\r",
													"            startTime: 111,\r",
													"            endTime: 222,\r",
													"            latitude: 'sadf3',\r",
													"            longitude: '34efs',\r",
													"            maxPlace: 2,\r",
													"            categoriesIds: [category],\r",
													"            placeSchema: 'NO'\r",
													"        })\r",
													"    }\r",
													"  };\r",
													"\r",
													"  try {\r",
													"    var response = await sendRequestAsync(request);\r",
													"    pm.expect(response.code).to.equal(201);\r",
													"\r",
													"    var responseBody = response.json();\r",
													"    var eventId = responseBody.id;\r",
													"\r",
													"    return eventId; // Return the eventId here\r",
													"  } catch (err) {\r",
													"    console.error(err);\r",
													"    return null;\r",
													"  }\r",
													"}\r",
													"\r",
													"// Test Case 1: Patch existing event\r",
													"function test1(eventId) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Test Case 1: Patch existing event\", function () {\r",
													"    //   var eventId = pm.environment.get(\"eventId\");\r",
													"      var request = {\r",
													"        method: 'PATCH',\r",
													"        url: baseUrl + '/events/' + eventId,\r",
													"        header: {\r",
													"          'Content-Type': 'application/json',\r",
													"          'Accept': 'application/json',\r",
													"          'sessionToken': pm.environment.get(\"sessionToken\")\r",
													"        },\r",
													"        body: {\r",
													"          mode: 'raw',\r",
													"          raw: JSON.stringify({\r",
													"            title: 'Updated Title',\r",
													"            startTime: 56,\r",
													"            endTime: 21412,\r",
													"            freePlace: 20,\r",
													"            maxPlace: 20,\r",
													"            placeSchema: 'GENERAL'\r",
													"          })\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(request, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(202)\r",
													"        resolve();\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"// Test Case 2: Attempt to patch non-existent event\r",
													"function test2() {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Test Case 2: Attempt to patch non-existent event\", function () {\r",
													"      var request = {\r",
													"        method: 'PATCH',\r",
													"        url: baseUrl + '/events/' + '0',\r",
													"        header: {\r",
													"          'Content-Type': 'application/json',\r",
													"          'Accept': 'application/json',\r",
													"          'sessionToken': pm.environment.get(\"sessionToken\")\r",
													"        },\r",
													"        body: {\r",
													"          mode: 'raw',\r",
													"          raw: JSON.stringify({\r",
													"            title: 'Updated Title',\r",
													"            startTime: 234,\r",
													"            endTime: 5666,\r",
													"            freePlace: 20,\r",
													"            maxPlace: 20,\r",
													"            placeSchema: 'GENERAL'\r",
													"          })\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(request, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(404);\r",
													"        resolve();\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"// Test Case 3: Attempt to patch event with invalid session token\r",
													"function test3(eventId) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Test Case 3: Attempt to patch event with invalid session token\", function () {\r",
													"      var request = {\r",
													"        method: 'PATCH',\r",
													"        url: baseUrl + '/events/' + eventId,\r",
													"        header: {\r",
													"          'Content-Type': 'application/json',\r",
													"          'Accept': 'application/json',\r",
													"          'sessionToken': 'invalid_session_token'\r",
													"        },\r",
													"        body: {\r",
													"          mode: 'raw',\r",
													"          raw: JSON.stringify({\r",
													"            title: 'Updated Title',\r",
													"            startTime: 1,\r",
													"            endTime: 4,\r",
													"            freePlace: 20,\r",
													"            maxPlace: 20,\r",
													"            placeSchema: 'GENERAL'\r",
													"          })\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(request, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(403);\r",
													"        resolve();\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"// Test Case 4: Attempt to patch event with invalid field in body\r",
													"function test4(eventId) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Test Case 4: Attempt to patch event with invalid field in body\", function () {\r",
													"      var request = {\r",
													"        method: 'PATCH',\r",
													"        url: baseUrl + '/events/' + eventId,\r",
													"        header: {\r",
													"          'Content-Type': 'application/json',\r",
													"          'Accept': 'application/json',\r",
													"          'sessionToken': pm.environment.get(\"sessionToken\")\r",
													"        },\r",
													"        body: {\r",
													"          mode: 'raw',\r",
													"          raw: JSON.stringify({\r",
													"            title: 'TEST EVENT FEEL FREEE TO DELETE IT',\r",
													"            name: 'Jan',\r",
													"            startTime: 111,\r",
													"            endTime: 222,\r",
													"            latitude: 'sadf3',\r",
													"            longitude: '34efs',\r",
													"            maxPlace: 2,\r",
													"            categoriesIds: [0],\r",
													"            placeSchema: 'NO'\r",
													"          })\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(request, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(400);\r",
													"        resolve();\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"\r",
													"// Test Case 5: Patch event with no fields to update\r",
													"function test5(eventId) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Test Case 5: Patch event with no fields to update\", function () {\r",
													"      var request = {\r",
													"        method: 'PATCH',\r",
													"        url: baseUrl + '/events/' + eventId,\r",
													"        header: {\r",
													"          'Content-Type': 'application/json',\r",
													"          'Accept': 'application/json',\r",
													"          'sessionToken': pm.environment.get(\"sessionToken\")\r",
													"        },\r",
													"        body: {\r",
													"          mode: 'raw',\r",
													"          raw: JSON.stringify({})\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(request, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(200);\r",
													"        resolve();\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6db348d8-52e1-4c0a-b04a-9d460e08edfe",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/ping",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"id": "1b540f05-fa71-4ee9-afa9-d05040f65f0f"
						},
						{
							"name": "my",
							"item": [
								{
									"name": "GET: Return list of events made by organizer, according to session",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f55b3373-75f7-4624-8a32-72db405488b0",
												"exec": [
													"var baseUrl = pm.environment.get(\"baseUrl\");\r",
													"\r",
													"(async function() {\r",
													"  try {\r",
													"    console.log(\"---------------------- Tests for GET: Find event by ID: BEGIN ----------------------\");\r",
													"    const categoryId1 = await addCategories('test category'+(new Date()).getTime());\r",
													"    eventId = await createEvent(categoryId1)\r",
													"    console.log(\"test 1\");\r",
													"    await test1(eventId);\r",
													"    console.log(\"test 2 fixtest -> return good erron on invalid sessionToken\");\r",
													"    // await test2(eventId);\r",
													"    console.log(\"---------------------- Tests for GET: Find event by ID: END ----------------------\");\r",
													"\r",
													"  } catch (err) {\r",
													"    console.error(err);\r",
													"  }\r",
													"})();\r",
													"\r",
													"function sendRequestAsync(request) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.sendRequest(request, function(err, response) {\r",
													"      if (err) {\r",
													"        reject(err);\r",
													"      } else {\r",
													"        resolve(response);\r",
													"      }\r",
													"    });\r",
													"  });\r",
													"}\r",
													"function addCategories(category) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Create new category\", function () {\r",
													"      var request = {\r",
													"        method: 'POST',\r",
													"        url: baseUrl + '/categories',\r",
													"        header: {\r",
													"            'categoryName': category,\r",
													"          'Content-Type': 'application/json',\r",
													"          'Accept': 'application/json'\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(request, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(201);\r",
													"        pm.expect(response.json()).to.have.property('name', category);\r",
													"        pm.expect(response.json().id).to.be.a('number');\r",
													"        resolve(response.json().id);\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"async function createEvent(category) {\r",
													"  var request = {\r",
													"    url: baseUrl+'/events',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'sessionToken': pm.environment.get(\"sessionToken\"),\r",
													"        'Content-Type': 'application/json',\r",
													"        'Accept': 'application/json'\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            title: 'TEST EVENT FEEL FREEE TO DELETE IT',\r",
													"            name: 'Jan',\r",
													"            startTime: 111,\r",
													"            endTime: 222,\r",
													"            latitude: 'sadf3',\r",
													"            longitude: '34efs',\r",
													"            maxPlace: 2,\r",
													"            categoriesIds: [category],\r",
													"            placeSchema: 'NO'\r",
													"        })\r",
													"    }\r",
													"  };\r",
													"\r",
													"  try {\r",
													"    var response = await sendRequestAsync(request);\r",
													"    pm.expect(response.code).to.equal(201);\r",
													"\r",
													"    var responseBody = response.json();\r",
													"    var eventId = responseBody.id;\r",
													"\r",
													"    return eventId; // Return the eventId here\r",
													"  } catch (err) {\r",
													"    console.error(err);\r",
													"    return null;\r",
													"  }\r",
													"}\r",
													"\r",
													"\r",
													"\r",
													"// Test Case 1: Get list of events made by organizer\r",
													"function test1(eventId) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Test Case 1: Get list of events made by organizer\", function () {\r",
													"      var request = {\r",
													"        method: 'GET',\r",
													"        url: baseUrl + '/events/my',\r",
													"        header: {\r",
													"          'Content-Type': 'application/json',\r",
													"          'Accept': 'application/json',\r",
													"          'sessionToken': pm.environment.get(\"sessionToken\")\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(request, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(200);\r",
													"        pm.expect(response.json()).to.be.an('array');\r",
													"        var events = response.json();\r",
													"        var containsMyEvent=false;\r",
													"        for (var i = 0; i < events.length; i++) {\r",
													"            var event = events[i];\r",
													"            if(event.id===eventId){\r",
													"            containsMyEvent=true;\r",
													"            break;\r",
													"            }\r",
													"        }\r",
													"        pm.expect(containsMyEvent).to.be.true;\r",
													"        resolve();\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"// Test Case 2: Attempt to get list of events made by organizer with invalid session token\r",
													"function test2() {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Test Case 2: Attempt to get list of events made by organizer with invalid session token\", function () {\r",
													"      var request = {\r",
													"        method: 'GET',\r",
													"        url: baseUrl + '/events/my',\r",
													"        header: {\r",
													"          'Content-Type': 'application/json',\r",
													"          'Accept': 'application/json',\r",
													"          'sessionToken': 'invalid_session_token'\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(request, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(403);\r",
													"        resolve();\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "5073f437-d900-4331-804a-da4ce9ed39a8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/ping",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"id": "1da02869-e818-4a05-bfc5-d09fa35f7bb1"
						},
						{
							"name": "getByCategory",
							"item": [
								{
									"name": "GET: Return list of all events in category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c5f627a-c8ed-4eb9-93e2-99575063a369",
												"exec": [
													"var baseUrl = pm.environment.get(\"baseUrl\");\r",
													"\r",
													"(async function() {\r",
													"  try {\r",
													"    console.log(\"---------------------- Tests for GET: Return list of all events in category: BEGIN ----------------------\");\r",
													"    const categoryId1 = await addCategories('test category'+(new Date()).getTime());\r",
													"    await CreateEvnetWithCategories(categoryId1);\r",
													"    console.log(\"test 1\");\r",
													"    await test1(categoryId1);\r",
													"    console.log(\"test 2\");\r",
													"    await test2();\r",
													"    console.log(\"---------------------- Tests for GET: Return list of all events in category: END ----------------------\");\r",
													"\r",
													"  } catch (err) {\r",
													"    console.error(err);\r",
													"  }\r",
													"})();\r",
													"\r",
													"function sendRequestAsync(request) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.sendRequest(request, function(err, response) {\r",
													"      if (err) {\r",
													"        reject(err);\r",
													"      } else {\r",
													"        resolve(response);\r",
													"      }\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"function addCategories(category) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Create new category\", function () {\r",
													"      var request = {\r",
													"        method: 'POST',\r",
													"        url: baseUrl + '/categories',\r",
													"        header: {\r",
													"            'categoryName': category,\r",
													"          'Content-Type': 'application/json',\r",
													"          'Accept': 'application/json'\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(request, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(201);\r",
													"        pm.expect(response.json()).to.have.property('name', category);\r",
													"        pm.expect(response.json().id).to.be.a('number');\r",
													"        resolve(response.json().id);\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"function CreateEvnetWithCategories(categoryId1) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"CreateEvnetWithCategories\", function () {\r",
													"      var request = {\r",
													"        method: 'POST',\r",
													"        url: baseUrl + '/events',\r",
													"        header: {\r",
													"          'Content-Type': 'application/json',\r",
													"          'Accept': 'application/json',\r",
													"          'sessionToken': pm.environment.get(\"sessionToken\")\r",
													"        },\r",
													"        body: {\r",
													"          mode: 'raw',\r",
													"          raw: JSON.stringify({\r",
													"            title: 'Test Event',\r",
													"            name: 'John',\r",
													"            startTime: 1649389200, // January 6, 2023 10:00:00 AM GMT\r",
													"            endTime: 1649392800, // January 6, 2023 11:00:00 AM GMT\r",
													"            latitude: '123.456',\r",
													"            longitude: '78.90',\r",
													"            maxPlace: 10,\r",
													"            categoriesIds: [categoryId1],\r",
													"            placeSchema: 'NO'\r",
													"          })\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(request, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(201);\r",
													"        pm.expect(response.json()).to.have.property('title', 'Test Event');\r",
													"        pm.expect(response.json()).to.have.property('name', 'John');\r",
													"        pm.expect(response.json()).to.have.property('startTime', 1649389200);\r",
													"        pm.expect(response.json()).to.have.property('endTime', 1649392800);\r",
													"        pm.expect(response.json()).to.have.property('latitude', '123.456');\r",
													"        pm.expect(response.json()).to.have.property('longitude', '78.90');\r",
													"        pm.expect(response.json()).to.have.property('maxPlace', 10);\r",
													"        pm.expect(response.json()).to.have.property('status', 'inFuture');\r",
													"        var categories = response.json().categories;\r",
													"            var categoryIds = categories.map(function (category) {\r",
													"              return category.id;\r",
													"            });\r",
													"        pm.expect(categoryIds).to.include.members([categoryId1]);\r",
													"        // pm.expect(response.json()).to.have.property('placeSchema', 'NO');\r",
													"        resolve();\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"\r",
													"// Test Case 1: Get events by category with valid categoryId\r",
													"function test1(categoryId) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Test Case 1: Get events by category with valid categoryId\", function () {\r",
													"      var request = {\r",
													"        method: 'GET',\r",
													"        url: baseUrl + '/events/getByCategory',\r",
													"        header: {\r",
													"          'Accept': 'application/json',\r",
													"          'categoryId': categoryId.toString()\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(request, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(200);\r",
													"        pm.expect(response.json()).to.be.an('array');\r",
													"        // Check if all events have category with categoryId\r",
													"        var events = response.json();\r",
													"        for (var i = 0; i < events.length; i++) {\r",
													"          var event = events[i];\r",
													"          var hasCategory = false;\r",
													"            var categories = event.categories;\r",
													"            var categoryIds = categories.map(function (category) {\r",
													"              return category.id;\r",
													"            });\r",
													"              pm.expect(categoryIds).to.include(categoryId)\r",
													"        }\r",
													"        resolve();\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"// Test Case 2: Attempt to get list of events with invalid category ID (eg. string instead of number)\r",
													"function test2() {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Test Case 2: Attempt to get list of events with invalid category ID\", function () {\r",
													"      var categoryId = 'sdf'; // Replace with a valid category ID\r",
													"      var request = {\r",
													"        method: 'GET',\r",
													"        url: baseUrl + '/events/getByCategory?categoryId=' + categoryId,\r",
													"        header: {\r",
													"          'Accept': 'application/json'\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(request, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(400);\r",
													"        resolve();\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "08ef5530-b3f9-4572-9e14-6694aa7b64a4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/ping",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"id": "98d0f368-8b35-427a-bf45-9278097cee1b"
						},
						{
							"name": "GET: Return list of all events",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07745e1a-b02f-4643-b7b5-5da8948dd901",
										"exec": [
											"var baseUrl = pm.environment.get(\"baseUrl\");\r",
											"\r",
											"(async function() {\r",
											"  try {\r",
											"    console.log(\"---------------------- Tests for GET: Return list of all events: BEGIN ----------------------\");\r",
											"    const categoryId1 = await addCategories('test category'+(new Date()).getTime());\r",
											"    eventId = await createEvent(categoryId1)\r",
											"    console.log(\"test 1\");\r",
											"    await test1(eventId);\r",
											"    console.log(\"---------------------- Tests for GET: Return list of all events: END ----------------------\");\r",
											"\r",
											"  } catch (err) {\r",
											"    console.error(err);\r",
											"  }\r",
											"})();\r",
											"\r",
											"function sendRequestAsync(request) {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.sendRequest(request, function(err, response) {\r",
											"      if (err) {\r",
											"        reject(err);\r",
											"      } else {\r",
											"        resolve(response);\r",
											"      }\r",
											"    });\r",
											"  });\r",
											"}\r",
											"function addCategories(category) {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Create new category\", function () {\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + '/categories',\r",
											"        header: {\r",
											"            'categoryName': category,\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json'\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"        pm.expect(response.code).to.equal(201);\r",
											"        pm.expect(response.json()).to.have.property('name', category);\r",
											"        pm.expect(response.json().id).to.be.a('number');\r",
											"        resolve(response.json().id);\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"async function createEvent(category) {\r",
											"  var request = {\r",
											"    url: baseUrl+'/events',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'sessionToken': pm.environment.get(\"sessionToken\"),\r",
											"        'Content-Type': 'application/json',\r",
											"        'Accept': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            title: 'TEST EVENT FEEL FREEE TO DELETE IT',\r",
											"            name: 'Jan',\r",
											"            startTime: 111,\r",
											"            endTime: 222,\r",
											"            latitude: 'sadf3',\r",
											"            longitude: '34efs',\r",
											"            maxPlace: 2,\r",
											"            categoriesIds: [category],\r",
											"            placeSchema: 'NO'\r",
											"        })\r",
											"    }\r",
											"  };\r",
											"\r",
											"  try {\r",
											"    var response = await sendRequestAsync(request);\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"\r",
											"    var responseBody = response.json();\r",
											"    var eventId = responseBody.id;\r",
											"\r",
											"    return eventId; // Return the eventId here\r",
											"  } catch (err) {\r",
											"    console.error(err);\r",
											"    return null;\r",
											"  }\r",
											"}\r",
											"\r",
											"// Test Case 1: Get all events\r",
											"function test1(eventId) {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 1: Get all events\", function () {\r",
											"      var request = {\r",
											"        method: 'GET',\r",
											"        url: baseUrl + '/events',\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json'\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"        pm.expect(response.code).to.equal(200);\r",
											"        pm.expect(response.json()).to.be.an('array');\r",
											"        pm.expect(response.json().length).to.be.greaterThan(0);\r",
											"        var events = response.json();\r",
											"        var containsCreatedEvent=false;\r",
											"        for (var i = 0; i < events.length; i++) {\r",
											"            var event = events[i];\r",
											"            if(event.id===eventId){\r",
											"            containsCreatedEvent=true;\r",
											"            break;\r",
											"            }\r",
											"        }\r",
											"        pm.expect(containsCreatedEvent).to.be.true;\r",
											"        resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "ce312a02-6fb3-449d-b195-ef69d69fc7b7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ping",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ping"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST: Add new event (fix test2)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a928333-d22a-4f8c-a143-85982f6c610a",
										"exec": [
											"var baseUrl = pm.environment.get(\"baseUrl\");\r",
											"\r",
											"(async function() {\r",
											"  try {\r",
											"    console.log(\"---------------------- Tests for POST: Add new event: BEGIN ----------------------\");\r",
											"    const categoryId1 = await addCategories('test category'+(new Date()).getTime());\r",
											"    const categoryId2 = await addCategories('test category'+(new Date()).getTime());\r",
											"    console.log(\"test 1\");\r",
											"    await test1(categoryId1, categoryId2);\r",
											"    console.log(\"test 2\");\r",
											"    await test2(); // return code is 500, but shoudl be 403\r",
											"    console.log(\"test 3\");\r",
											"    await test3();\r",
											"    console.log(\"test 4\");\r",
											"    await test4();\r",
											"    console.log(\"---------------------- Tests for POST: Add new event: END ----------------------\");\r",
											"\r",
											"  } catch (err) {\r",
											"    console.error(err);\r",
											"  }\r",
											"})();\r",
											"\r",
											"function sendRequestAsync(request) {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.sendRequest(request, function(err, response) {\r",
											"      if (err) {\r",
											"        reject(err);\r",
											"      } else {\r",
											"        resolve(response);\r",
											"      }\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"\r",
											"function addCategories(category) {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Create new category\", function () {\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + '/categories',\r",
											"        header: {\r",
											"            'categoryName': category,\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json'\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"        pm.expect(response.code).to.equal(201);\r",
											"        pm.expect(response.json()).to.have.property('name', category);\r",
											"        pm.expect(response.json().id).to.be.a('number');\r",
											"        resolve(response.json().id);\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"// Test Case 1: Add event with valid parameters\r",
											"function test1(categoryId1, categoryId2) {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 1: Add event with valid parameters\", function () {\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + '/events',\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json',\r",
											"          'sessionToken': pm.environment.get(\"sessionToken\")\r",
											"        },\r",
											"        body: {\r",
											"          mode: 'raw',\r",
											"          raw: JSON.stringify({\r",
											"            title: 'Test Event',\r",
											"            name: 'John',\r",
											"            startTime: 1649389200, // January 6, 2023 10:00:00 AM GMT\r",
											"            endTime: 1649392800, // January 6, 2023 11:00:00 AM GMT\r",
											"            latitude: '123.456',\r",
											"            longitude: '78.90',\r",
											"            maxPlace: 10,\r",
											"            categoriesIds: [categoryId1, categoryId2],\r",
											"            placeSchema: 'NO'\r",
											"          })\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"        pm.expect(response.code).to.equal(201);\r",
											"        pm.expect(response.json()).to.have.property('title', 'Test Event');\r",
											"        pm.expect(response.json()).to.have.property('name', 'John');\r",
											"        pm.expect(response.json()).to.have.property('startTime', 1649389200);\r",
											"        pm.expect(response.json()).to.have.property('endTime', 1649392800);\r",
											"        pm.expect(response.json()).to.have.property('latitude', '123.456');\r",
											"        pm.expect(response.json()).to.have.property('longitude', '78.90');\r",
											"        pm.expect(response.json()).to.have.property('maxPlace', 10);\r",
											"        pm.expect(response.json()).to.have.property('status', 'inFuture');\r",
											"        var categories = response.json().categories;\r",
											"            var categoryIds = categories.map(function (category) {\r",
											"              return category.id;\r",
											"            });\r",
											"        pm.expect(categoryIds).to.include.members([categoryId1,categoryId2]);\r",
											"        // pm.expect(response.json()).to.have.property('placeSchema', 'NO');\r",
											"        resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"// Test Case 2: Add event with invalid session token\r",
											"function test2() {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 2: Add event with invalid session token\", function () {\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + '/events',\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json',\r",
											"          'sessionToken': 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJpbzJ0ZXN0bWFpbEBnbWFpbC5jb20iLCJpYXQiOjE2ODA4NzY4NDAsImV4cCI6MTY4MDg3ODI4MH0.2Pp5KPrP2Iz2Zsfw4llHjDbxCGK7lxOJHnb5phfgFAI'\r",
											"        },\r",
											"        body: {\r",
											"          mode: 'raw',\r",
											"          raw: JSON.stringify({\r",
											"            title: 'Test Event',\r",
											"            name: 'John',\r",
											"            startTime: 1649389200, // January 6, 2023 10:00:00 AM GMT\r",
											"            endTime: 1649392800, // January 6, 2023 11:00:00 AM GMT\r",
											"            latitude: '123.456',\r",
											"            longitude: '78.90',\r",
											"            maxPlace: 10,\r",
											"            categoriesIds: [1, 2],\r",
											"            placeSchema: 'NO'\r",
											"          })\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"        pm.expect(response.code).to.equal(403); \r",
											"        resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"// Test Case 3: Add event with missing parameters\r",
											"function test3() {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 3: Add event with missing parameters\", function () {\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + '/events',\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json',\r",
											"          'sessionToken': pm.environment.get(\"sessionToken\")\r",
											"        },\r",
											"        body: {\r",
											"          mode: 'raw',\r",
											"          raw: JSON.stringify({\r",
											"            // title: 'Test Event',\r",
											"            name: 'John',\r",
											"            startTime: 1649389200, // January 6, 2023 10:00:00 AM GMT\r",
											"            endTime: 1649392800, // January 6, 2023 11:00:00 AM GMT\r",
											"            latitude: 'invalid_latitude',\r",
											"            longitude: 'invalid_longitude',\r",
											"            maxPlace: 0, // Invalid value for maxPlace\r",
											"            categoriesIds: [], // Empty array of category IDs\r",
											"            placeSchema: 'invalid_schema'\r",
											"          })\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"        pm.expect(response.code).to.equal(400);\r",
											"        resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"// Test Case 4: Add event with invalid categories\r",
											"function test4(categoryId1, categoryId2) {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 4: Add event with invalid categories\", function () {\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + '/events',\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json',\r",
											"          'sessionToken': pm.environment.get(\"sessionToken\")\r",
											"        },\r",
											"        body: {\r",
											"          mode: 'raw',\r",
											"          raw: JSON.stringify({\r",
											"            title: 'Test Event',\r",
											"            name: 'John',\r",
											"            startTime: 1649389200, // January 6, 2023 10:00:00 AM GMT\r",
											"            endTime: 1649392800, // January 6, 2023 11:00:00 AM GMT\r",
											"            latitude: '123.456',\r",
											"            longitude: '78.90',\r",
											"            maxPlace: 10,\r",
											"            categoriesIds: [-1,1],\r",
											"            placeSchema: 'NO'\r",
											"          })\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"        pm.expect(response.code).to.equal(400);\r",
											"    \r",
											"        resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "47d3f659-a41a-4ecc-8acf-f8a6ed3046e4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ping",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ping"
									]
								}
							},
							"response": []
						}
					],
					"id": "98ec4017-222a-497f-8f19-0f4ddde579e6"
				},
				{
					"name": "categories",
					"item": [
						{
							"name": "GET: Return list of all categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2f67f54-91d6-453f-b7af-373c6f2d7aec",
										"exec": [
											"var baseUrl = pm.environment.get(\"baseUrl\");\r",
											"\r",
											"(async function() {\r",
											"  try {\r",
											"    console.log(\"---------------------- Tests for GET: Return list of all categories: BEGIN ----------------------\");\r",
											"    console.log(\"test 1\");\r",
											"    await test1();\r",
											"    console.log(\"---------------------- Tests for GET: Return list of all categories: END ----------------------\");\r",
											"\r",
											"  } catch (err) {\r",
											"    console.error(err);\r",
											"  }\r",
											"})();\r",
											"\r",
											"\r",
											"// Test Case 1: Add two categories and then get all categories\r",
											"function test1() {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    // Send first request to create a new category\r",
											"    var category1 = 'category1'+(new Date()).getTime();\r",
											"    var createRequest1 = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + '/categories',\r",
											"        header: {\r",
											"          'categoryName': category1,\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json'\r",
											"        }\r",
											"      };\r",
											"\r",
											"    pm.sendRequest(createRequest1, function (err, createResponse1) {\r",
											"        pm.expect(createResponse1.code).to.equal(201);\r",
											"        pm.expect(createResponse1.json()).to.have.property('name', category1);\r",
											"        pm.expect(createResponse1.json().id).to.be.a('number');\r",
											"\r",
											"      // Send second request to create a new category\r",
											"      var category2 = 'category2'+(new Date()).getTime();\r",
											"      var createRequest2 = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + '/categories',\r",
											"        header: {\r",
											"          'categoryName': category2,\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json'\r",
											"        }\r",
											"      };\r",
											"\r",
											"      pm.sendRequest(createRequest2, function (err, createResponse2) {\r",
											"        pm.expect(createResponse2.code).to.equal(201);\r",
											"        pm.expect(createResponse2.json()).to.have.property('name', category2);\r",
											"        pm.expect(createResponse2.json().id).to.be.a('number');\r",
											"\r",
											"        // Send third request to get all categories\r",
											"        var getAllRequest = {\r",
											"          method: 'GET',\r",
											"          url: baseUrl + '/categories',\r",
											"          header: {\r",
											"            'Accept': 'application/json',\r",
											"          },\r",
											"        };\r",
											"\r",
											"        pm.sendRequest(getAllRequest, function (err, getAllResponse) {\r",
											"          pm.test(\"Test Case: Add two categories and then get all categories\", function () {\r",
											"            pm.expect(getAllResponse.code).to.equal(200);\r",
											"            pm.expect(getAllResponse.json()).to.be.an('array').that.has.lengthOf.at.least(2);\r",
											"            var categories = getAllResponse.json();\r",
											"            var categoryNames = categories.map(function (category) {\r",
											"              return category.name;\r",
											"            });\r",
											"             pm.expect(categoryNames).to.include.members([category1,category2]);\r",
											"          });\r",
											"          resolve();\r",
											"        });\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5288e7db-c620-44fa-b12a-47ef77cf5870",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ping",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ping"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST: Create new category",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c137476f-88eb-450c-b495-f4bf919404b9",
										"exec": [
											"var baseUrl = pm.environment.get(\"baseUrl\");\r",
											"\r",
											"(async function() {\r",
											"  try {\r",
											"    console.log(\"---------------------- Tests for POST: Create new category: BEGIN ----------------------\");\r",
											"    console.log(\"test 1\");\r",
											"    await test1();\r",
											"    console.log(\"test 2\");\r",
											"    await test2();\r",
											"    console.log(\"---------------------- Tests for POST: Create new category: END ----------------------\");\r",
											"\r",
											"  } catch (err) {\r",
											"    console.error(err);\r",
											"  }\r",
											"})();\r",
											"\r",
											"// Test Case 1: Create new category\r",
											"function test1() {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 1: Create new category\", function () {\r",
											"      var category = 'test category '+(new Date()).getTime();\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + '/categories',\r",
											"        header: {\r",
											"          'categoryName': category,  \r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json'\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"        pm.expect(response.code).to.equal(201);\r",
											"        pm.expect(response.json()).to.have.property('name', category);\r",
											"        pm.expect(response.json().id).to.be.a('number');\r",
											"        resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"// Test Case 2: Attempt to add an existing category\r",
											"function test2() {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Attempt to add an existing category\", function () {\r",
											"      var categoryName = 'test category'+(new Date()).getTime();\r",
											"      // First, add the category\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + '/categories',\r",
											"        header: {\r",
											"          'categoryName': categoryName,\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json'\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"        pm.expect(response.code).to.equal(201);\r",
											"\r",
											"        // Now try to add the same category again\r",
											"        var request = {\r",
											"          method: 'POST',\r",
											"          url: baseUrl + '/categories?categoryName=' + categoryName,\r",
											"          header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'Accept': 'application/json'\r",
											"          }\r",
											"        };\r",
											"        pm.sendRequest(request, function (err, response) {\r",
											"          pm.expect(response.code).to.equal(400);\r",
											"          resolve();\r",
											"        });\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "21eed11f-9bbe-4bce-81f0-f1e50bd21001",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/ping",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ping"
									]
								}
							},
							"response": []
						}
					],
					"id": "394bd7b1-5f3a-4ae7-b991-7a8831172572"
				}
			],
			"id": "534db2fb-017b-4495-b1a0-29b1d6b47929"
		}
	]
}