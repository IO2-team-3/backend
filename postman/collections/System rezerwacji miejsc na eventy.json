{
	"info": {
		"_postman_id": "477c650e-3b8e-46e9-a581-46b84e02d36f",
		"name": "System rezerwacji miejsc na eventy",
		"description": "Niniejsza dokumentacja stanowi opis REST API implemtowanego przez serwer centralny. Endpointy \n\nContact Support:\n Email: XXX@pw.edu.pl",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "20887326-477c650e-3b8e-46e9-a581-46b84e02d36f"
	},
	"item": [
		{
			"name": "reservation",
			"item": [
				{
					"name": "Create new reservation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3bf46315-2bd9-4caa-8ddc-1212ecb9da66",
								"exec": [
									"var baseUrl  = 'http://localhost:8080/'\r",
									"\r",
									"function sendRequestAsync(request) {\r",
									"  return new Promise(function(resolve, reject) {\r",
									"    pm.sendRequest(request, function(err, response) {\r",
									"      if (err) {\r",
									"        reject(err);\r",
									"      } else {\r",
									"        resolve(response);\r",
									"      }\r",
									"    });\r",
									"  });\r",
									"}\r",
									"\r",
									"async function createEvent() {\r",
									"  var request = {\r",
									"    url: baseUrl+'events',\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'sessionToken': pm.environment.get(\"sessionToken\"),\r",
									"        'Content-Type': 'application/json',\r",
									"        'Accept': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            title: 'TEST EVENT FEEL FREEE TO DELETE IT',\r",
									"            name: 'Jan',\r",
									"            startTime: 111,\r",
									"            endTime: 222,\r",
									"            latitude: 'sadf3',\r",
									"            longitude: '34efs',\r",
									"            maxPlace: 5,\r",
									"            categoriesIds: [2, 3],\r",
									"            placeSchema: 'NO'\r",
									"        })\r",
									"    }\r",
									"  };\r",
									"\r",
									"  try {\r",
									"    var response = await sendRequestAsync(request);\r",
									"    pm.expect(response.code).to.equal(200);\r",
									"\r",
									"    var responseBody = response.json();\r",
									"    var eventId = responseBody.id;\r",
									"\r",
									"    return eventId; // Return the eventId here\r",
									"  } catch (err) {\r",
									"    console.error(err);\r",
									"    return null;\r",
									"  }\r",
									"}\r",
									"\r",
									"\r",
									"var eventId;\r",
									"eventId = (async function() {\r",
									"  try {\r",
									"    eventId = await createEvent();\r",
									"    console.log(\"Event ID in main code: \" + eventId);\r",
									"    await test1();\r",
									"    await test2();\r",
									"    await test3();\r",
									"    await test4();\r",
									"    await test5();\r",
									"    await test6();\r",
									"    return eventId;\r",
									"    // Use the eventId in your code here\r",
									"  } catch (err) {\r",
									"    console.error(err);\r",
									"  }\r",
									"})();\r",
									"\r",
									"// Use eventId here\r",
									"// Wait for the createEvent() function to complete\r",
									"// setTimeout(function() {\r",
									"//   console.log(\"Event ID outside async function: \" + eventId);\r",
									"// }, 2000);\r",
									"// var evnetId= responseEvent.json().property('id')\r",
									"// console.log(eventId)\r",
									"\r",
									"// Test Case 1: Make reservation with valid event ID and place ID\r",
									"function test1(){\r",
									"  return new Promise(function(resolve, reject) {\r",
									"    pm.test(\"Test Case 1: Make reservation with valid event ID and place ID\", function () {\r",
									"      var request = {\r",
									"        method: 'POST',\r",
									"        url: baseUrl+'reservation',\r",
									"        header: {\r",
									"          'Content-Type': 'application/json',\r",
									"          'Accept': 'application/json',\r",
									"          'eventId': eventId.toString(),\r",
									"          'placeID': '0'\r",
									"        }\r",
									"      };\r",
									"      pm.sendRequest(request, function (err, response) {\r",
									"        console.log(response)\r",
									"        pm.expect(response.code).to.equal(201);\r",
									"        pm.expect(response.json()).to.have.property('reservationToken');\r",
									"        pm.expect(response.json()).to.have.property('placeId', 0);\r",
									"        pm.expect(response.json()).to.have.property('eventId', eventId);\r",
									"        resolve();\r",
									"      });\r",
									"    });\r",
									"  });\r",
									"}\r",
									"\r",
									"// Test Case 2: Make reservation with invalid event ID\r",
									"async function test2(){\r",
									"    return new Promise((resolve, reject) => {\r",
									"        pm.test(\"Test Case 2: Make reservation with invalid event ID\", function () {\r",
									"            var request = {\r",
									"                method: 'POST',\r",
									"                url: baseUrl+ 'reservation',\r",
									"                header: {\r",
									"                    'Content-Type': 'application/json',\r",
									"                    'Accept': 'application/json',\r",
									"                    'eventId': '-1',\r",
									"                    'placeID': '10'\r",
									"                }\r",
									"            };\r",
									"            pm.sendRequest(request, function (err, response) {\r",
									"                if (err) {\r",
									"                    reject(err);\r",
									"                } else {\r",
									"                    pm.expect(response.code).to.equal(404);\r",
									"                    resolve();\r",
									"                }\r",
									"            });\r",
									"        });\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"// Test Case 3: Make reservation with no free place\r",
									"function test3() {\r",
									"  return new Promise(function(resolve, reject) {\r",
									"    pm.test(\"Test Case 3: Make reservation with no free place\", function() {\r",
									"      var request = {\r",
									"        method: 'POST',\r",
									"        url: baseUrl + 'reservation',\r",
									"        header: {\r",
									"          'Content-Type': 'application/json',\r",
									"          'Accept': 'application/json',\r",
									"          'eventId': eventId.toString(),\r",
									"          'placeID': '0'\r",
									"        }\r",
									"      };\r",
									"      pm.sendRequest(request, function(err, response) {\r",
									"        pm.expect(response.code).to.equal(400);\r",
									"        resolve();\r",
									"      });\r",
									"    });\r",
									"  });\r",
									"}\r",
									"\r",
									"// Test Case 4: Make reservation with missing event ID header\r",
									"function test4() {\r",
									"  return new Promise(function(resolve, reject) {\r",
									"    pm.test(\"Test Case 4: Make reservation with missing event ID header\", function() {\r",
									"      var request = {\r",
									"        method: 'POST',\r",
									"        url: baseUrl + 'reservation',\r",
									"        header: {\r",
									"          'Content-Type': 'application/json',\r",
									"          'Accept': 'application/json',\r",
									"          'placeID': '10'\r",
									"        }\r",
									"      };\r",
									"      pm.sendRequest(request, function(err, response) {\r",
									"        pm.expect(response.code).to.equal(400);\r",
									"        resolve();\r",
									"      });\r",
									"    });\r",
									"  });\r",
									"}\r",
									"\r",
									"// Test Case 5: Make reservation with invalid place ID\r",
									"function test5() {\r",
									"  return new Promise(function(resolve, reject) {\r",
									"    pm.test(\"Test Case 5: Make reservation with invalid place ID\", function() {\r",
									"      var request = {\r",
									"        method: 'POST',\r",
									"        url: baseUrl + 'reservation',\r",
									"        header: {\r",
									"          'Content-Type': 'application/json',\r",
									"          'eventId': eventId.toString(),\r",
									"          'placeID': '-1'\r",
									"        }\r",
									"      };\r",
									"      pm.sendRequest(request, function(err, response) {\r",
									"        pm.expect(response.code).to.equal(404);\r",
									"        resolve();\r",
									"      });\r",
									"    });\r",
									"  });\r",
									"}\r",
									"\r",
									"\r",
									"// Test Case 6: Make reservation with missing headers\r",
									"function test6() {\r",
									"  return new Promise(function(resolve, reject) {\r",
									"    pm.test(\"Test Case 6: Make reservation with missing headers\", function () {\r",
									"      var request = {\r",
									"          method: 'POST',\r",
									"          url: baseUrl + 'reservation',\r",
									"          header: {\r",
									"              'Content-Type': 'application/json'\r",
									"          }\r",
									"      };\r",
									"      pm.sendRequest(request, function (err, response) {\r",
									"          pm.expect(response.code).to.equal(400);\r",
									"          resolve();\r",
									"      });\r",
									"    });\r",
									"  });\r",
									"}\r",
									"\r",
									"\r",
									"// // Test Case 7: Make reservation with invalid\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "622dd1f1-2bcb-4f76-9f3b-f4b7a124922f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "ID of place",
								"key": "placeID",
								"value": "2"
							},
							{
								"key": "eventID",
								"value": "15",
								"description": "ID of event",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reservation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reservation"
							]
						}
					},
					"response": [
						{
							"id": "946bb0f1-7efd-44b9-9fd2-f60654915b00",
							"name": "created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ID of event",
										"key": "eventId",
										"value": "<long>"
									},
									{
										"description": "ID of place",
										"key": "placeID",
										"value": "<long>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reservation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reservation"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"eventId\": \"<long>\",\n  \"placeId\": \"<long>\",\n  \"reservationToken\": \"<string>\"\n}"
						},
						{
							"id": "4c7569fa-2588-4d59-94b8-f49c315fe90e",
							"name": "no free place or place taken",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ID of event",
										"key": "eventId",
										"value": "<long>"
									},
									{
										"description": "ID of place",
										"key": "placeID",
										"value": "<long>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reservation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reservation"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"id": "216af152-7226-4b11-95e6-80f79bf91b2d",
							"name": "event not exist or done",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) ID of event",
										"key": "eventId",
										"value": "<long>"
									},
									{
										"description": "ID of place",
										"key": "placeID",
										"value": "<long>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reservation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reservation"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "delete reservation",
					"id": "b48c22e9-754d-472b-933f-7b327989756b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"description": "(Required) token of reservation",
								"key": "reservationToken",
								"value": "8bfd0d12-54b2-4b0b-8b28-8ea0765b9fa6"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reservation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reservation"
							]
						}
					},
					"response": [
						{
							"id": "694e32dd-ab5e-4259-8ace-bbfda0726fb6",
							"name": "deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "(Required) token of reservation",
										"key": "reservationToken",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reservation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reservation"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"id": "19eb09cc-90e8-45ee-8cb5-5b04bef7c755",
							"name": "token not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "(Required) token of reservation",
										"key": "reservationToken",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reservation",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reservation"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"id": "d291c1c1-8779-4967-8ea2-65dccab22525"
		},
		{
			"name": "organizer",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Confirm orginizer account",
							"id": "2f522528-00e0-45e8-be79-0cc98da4e1b1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) code from email",
										"key": "code",
										"value": "<string>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/organizer/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizer",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>"
										}
									]
								}
							},
							"response": [
								{
									"id": "60b87b2a-b496-4d22-b436-ea6e114b4edb",
									"name": "nothing to do, account already confirmed",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) code from email",
												"key": "code",
												"value": "<string>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/organizer/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizer",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"id": "4d60c8a6-4bdd-45c8-9346-3a8bd090e050",
									"name": "account confirmed",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) code from email",
												"key": "code",
												"value": "<string>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/organizer/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizer",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"id": "f343b4d9-09a6-4347-b894-08a975ddf5a5",
									"name": "code wrong",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) code from email",
												"key": "code",
												"value": "<string>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/organizer/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizer",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"id": "61634520-d520-48e5-834a-651522fbc41d",
									"name": "organizer id not found",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) code from email",
												"key": "code",
												"value": "<string>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/organizer/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizer",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Confirm orginizer account",
							"id": "a3c905cf-9e58-45bb-a6fd-5a5dfa3c9fcd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "sessionToken",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/organizer/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizer",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<string>"
										}
									]
								}
							},
							"response": [
								{
									"id": "fdc5c779-306c-44af-aa0b-91698655c32b",
									"name": "deleted",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "sessionToken",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/organizer/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizer",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"id": "2c0922b7-96d3-497a-b8ae-db442f025ee4",
									"name": "invalid session",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "sessionToken",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/organizer/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizer",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"id": "95d0c89d-166f-4131-948a-dba11d0f5d0a",
									"name": "id not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "sessionToken",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/organizer/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizer",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Patch orginizer account",
							"id": "2a578f05-c6fe-4080-98a1-41176dd5fa70",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJpbzJ0ZXN0bWFpbEBnbWFpbC5jb20iLCJpYXQiOjE2ODA3ODkxMDIsImV4cCI6MTY4MDc5MDU0Mn0.X4xKpY7V6SL8mkFNz5RurKB6HdhPhbFPZGledlEkXk0",
											"type": "string"
										},
										{
											"key": "key",
											"value": "sessionToken",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"jansdf\",\n  \"password\": \"123\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/organizer/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizer",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "4"
										}
									]
								}
							},
							"response": [
								{
									"id": "36ac5018-beb4-4562-9dc1-50a26d9cd272",
									"name": "nothing to do, no field to patch",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "sessionToken",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organizer/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizer",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"id": "9332bfb8-0d96-4bcb-906e-401a40b7014a",
									"name": "patched",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "sessionToken",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organizer/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizer",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"id": "2b556293-6545-498a-8bd6-52bee82c9579",
									"name": "invalid email or password",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "sessionToken",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organizer/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizer",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"id": "2958faf1-b034-48e4-86d1-b47f767b9090",
									"name": "invalid session",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "sessionToken",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organizer/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizer",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"id": "30990598-952b-4eca-98a5-bc3946a37c91",
									"name": "id not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "sessionToken",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/organizer/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizer",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"id": "ed8fa752-c7e5-4447-b94c-a957e89b08db"
				},
				{
					"name": "login",
					"item": [
						{
							"name": "Logs organizer into the system",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e8cfb68-2846-40d1-982d-9f899e7b80c6",
										"exec": [
											"// var baseUrl  = 'http://localhost:8080/';\r",
											"\r",
											"// (async function() {\r",
											"//   try {\r",
											"//     console.log(\"---------------------- get session token (NOT A TEST) ----------------------\");\r",
											"//     pm.sendRequest({\r",
											"//         url: baseUrl + 'organizer/login',\r",
											"//         method: 'GET',\r",
											"//         header: {\r",
											"//             'Content-Type': 'application/json',\r",
											"//             'Accept': 'application/json',\r",
											"//             'email': 'io2testmail@gmail.com',\r",
											"//             'password': '123'\r",
											"//         }\r",
											"//     }, function (err, response) {\r",
											"//     if (err) {\r",
											"//         console.log(err);\r",
											"//     } else {\r",
											"//         pm.environment.set(\"sessionToken\", response.json().sessionToken);\r",
											"//     }\r",
											"// });\r",
											"\r",
											"//   } catch (err) {\r",
											"//     console.error(err);\r",
											"//   }\r",
											"// })();\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "80944210-52ae-498a-932c-0897afabd3b6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) The organizer email for login",
										"key": "email",
										"value": "io2testmail@gmail.com"
									},
									{
										"description": "(Required) the password",
										"key": "password",
										"value": "123"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/organizer/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizer",
										"login"
									]
								}
							},
							"response": [
								{
									"id": "cad84f88-cc90-413a-bcd2-ddbe6862aff9",
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) The organizer email for login",
												"key": "email",
												"value": "<string>"
											},
											{
												"description": "(Required) the password",
												"key": "password",
												"value": "<string>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/organizer/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizer",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"sessionToken\": \"<string>\"\n}"
								},
								{
									"id": "81989a91-7f1a-42df-a385-8ade6a0be59a",
									"name": "Invalid email or password",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) The organizer email for login",
												"key": "email",
												"value": "<string>"
											},
											{
												"description": "(Required) the password",
												"key": "password",
												"value": "<string>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/organizer/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"organizer",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"id": "926f2a91-fbcd-47a4-b596-a4ae2c25489a"
				},
				{
					"name": "Create orginizer account",
					"id": "d01fc211-8fa3-436c-8a3d-94a1e4b26640",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"janw\",\n  \"email\": \"io2testmail@gmail.com\",\n  \"password\": \"123\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/organizer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizer"
							]
						}
					},
					"response": [
						{
							"id": "6f0e338c-522f-42fe-bc4c-1faea3264c78",
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/organizer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizer"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<long>\",\n  \"name\": \"<string>\",\n  \"email\": \"<string>\",\n  \"status\": \"pending\"\n}"
						},
						{
							"id": "f6fb728b-0186-4f74-a372-3495838936ab",
							"name": "email already in use",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/organizer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizer"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get organizer account (my account)",
					"id": "d2b417b6-56f4-45e6-9e39-da4d19d126ab",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "sessionToken",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/organizer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"organizer"
							]
						}
					},
					"response": [
						{
							"id": "cac5b69d-95e7-4c48-aa70-29f1f5d64fbd",
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "sessionToken",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/organizer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizer"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<long>\",\n  \"name\": \"<string>\",\n  \"email\": \"<string>\",\n  \"status\": \"pending\"\n}"
						},
						{
							"id": "a84837b9-a2e0-4e33-b728-d0b08ae6cec8",
							"name": "invalid session",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "sessionToken",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/organizer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"organizer"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"id": "7831ec8d-86c9-4e0f-914e-da904520d4f6"
		},
		{
			"name": "events",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Find event by ID",
							"id": "44601366-e86a-4c3c-864c-293b044b391c",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "13"
										}
									]
								},
								"description": "Returns a single event"
							},
							"response": [
								{
									"id": "b21ecc7f-6a7a-4837-a528-b2e0558c7425",
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/events/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"events",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<long>\",\n  \"title\": \"<string>\",\n  \"name\": \"<string>\",\n  \"startTime\": \"<long>\",\n  \"endTime\": \"<long>\",\n  \"latitude\": \"<string>\",\n  \"longitude\": \"<string>\",\n  \"maxPlace\": \"<long>\",\n  \"categories\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"done\",\n  \"freePlace\": \"<long>\",\n  \"places\": [\n    {\n      \"id\": \"<long>\",\n      \"free\": \"<boolean>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"free\": \"<boolean>\"\n    }\n  ],\n  \"placeSchema\": \"<string>\"\n}"
								},
								{
									"id": "b9a224ca-c515-4705-9b0a-e3c917cf7a12",
									"name": "Invalid ID supplied",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/events/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"events",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"id": "ca45251c-c8f1-4050-b38e-0e4ec0c65f6e",
									"name": "Event not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/events/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"events",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Cancel event",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d47923a8-8f95-41e6-8032-83c855dd52eb",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e6db6d32-f747-4514-bac7-0b73a369013b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJpbzJ0ZXN0bWFpbEBnbWFpbC5jb20iLCJpYXQiOjE2ODA4Njk4MTIsImV4cCI6MTY4MDg3MTI1Mn0.sYu-0bAwG2k76qLgm2-8XhZ0SQHLqa0DfreMN7Y3rac",
											"type": "string"
										},
										{
											"key": "key",
											"value": "sessionToken",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "12"
										}
									]
								}
							},
							"response": [
								{
									"id": "7c2b1523-4b6d-480f-9060-0de434fd94b9",
									"name": "deleted",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "sessionToken",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/events/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"events",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"id": "9daedfd1-b610-49ce-be3c-6256607bc53d",
									"name": "invalid session",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "sessionToken",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/events/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"events",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"id": "7f652d98-a0cc-4bd4-874b-660d6773904d",
									"name": "id not found",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "sessionToken",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/events/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"events",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "patch existing event",
							"id": "087cabdf-3dab-4b54-8386-3e094c8ae32d",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJpbzJ0ZXN0bWFpbEBnbWFpbC5jb20iLCJpYXQiOjE2ODA4Njg4NzAsImV4cCI6MTY4MDg3MDMxMH0.1DhuUmgPjh6RfQNAlXroJANIZ0FMWq8AfqBgXMyQ-Yo",
											"type": "string"
										},
										{
											"key": "key",
											"value": "sessionToken",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"sd\",\n  \"name\": \"44\",\n  \"startTime\": \"2\",\n  \"endTime\": \"3\",\n  \"latitude\": \"\",\n  \"longitude\": \"\",\n  \"placeSchema\": \"\",\n  \"maxPlace\": \"3\",\n  \"categoriesIds\": [  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "13"
										}
									]
								}
							},
							"response": [
								{
									"id": "3afcac98-b6f4-4ad3-a534-f2e87d9249d6",
									"name": "nothing to do, no field to patch",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "sessionToken",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"<string>\",\n  \"name\": \"<string>\",\n  \"startTime\": \"<long>\",\n  \"endTime\": \"<long>\",\n  \"latitude\": \"<string>\",\n  \"longitude\": \"<string>\",\n  \"placeSchema\": \"<string>\",\n  \"maxPlace\": \"<long>\",\n  \"categoriesIds\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/events/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"events",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"id": "2e399a76-0a59-4849-895c-437507e7508d",
									"name": "patched",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "sessionToken",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"<string>\",\n  \"name\": \"<string>\",\n  \"startTime\": \"<long>\",\n  \"endTime\": \"<long>\",\n  \"latitude\": \"<string>\",\n  \"longitude\": \"<string>\",\n  \"placeSchema\": \"<string>\",\n  \"maxPlace\": \"<long>\",\n  \"categoriesIds\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/events/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"events",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"id": "2c9c0126-e6de-43b0-907b-6f6c8a18b3f4",
									"name": "invalid id or fields in body",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "sessionToken",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"<string>\",\n  \"name\": \"<string>\",\n  \"startTime\": \"<long>\",\n  \"endTime\": \"<long>\",\n  \"latitude\": \"<string>\",\n  \"longitude\": \"<string>\",\n  \"placeSchema\": \"<string>\",\n  \"maxPlace\": \"<long>\",\n  \"categoriesIds\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/events/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"events",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"id": "753aa569-1a3a-4bd1-8092-a88a279cd25d",
									"name": "invalid session",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "sessionToken",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"<string>\",\n  \"name\": \"<string>\",\n  \"startTime\": \"<long>\",\n  \"endTime\": \"<long>\",\n  \"latitude\": \"<string>\",\n  \"longitude\": \"<string>\",\n  \"placeSchema\": \"<string>\",\n  \"maxPlace\": \"<long>\",\n  \"categoriesIds\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/events/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"events",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"id": "cb56da39-f60f-4518-ae04-af15b17e596a",
									"name": "id not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "sessionToken",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"title\": \"<string>\",\n  \"name\": \"<string>\",\n  \"startTime\": \"<long>\",\n  \"endTime\": \"<long>\",\n  \"latitude\": \"<string>\",\n  \"longitude\": \"<string>\",\n  \"placeSchema\": \"<string>\",\n  \"maxPlace\": \"<long>\",\n  \"categoriesIds\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/events/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"events",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"id": "58f206d7-18c5-4bcd-be8a-8634999c7ec7"
				},
				{
					"name": "my",
					"item": [
						{
							"name": "Return list of events made by organizer, according to session",
							"id": "ea5c834a-c06e-422b-9c6a-f97c3b746dfd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJpbzJ0ZXN0bWFpbEBnbWFpbC5jb20iLCJpYXQiOjE2ODA3MDk4MDgsImV4cCI6MTY4MDcxMTI0OH0.-n3rJB5UzUv0ESjPDFpesLFCe0P06ESg3jQPCCEGzmU",
											"type": "string"
										},
										{
											"key": "key",
											"value": "sessionToken",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/events/my",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"my"
									]
								}
							},
							"response": [
								{
									"id": "2215e9d0-9f52-4ebd-8baf-9db938d5d93a",
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "sessionToken",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/events/my",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"events",
												"my"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"<long>\",\n    \"title\": \"<string>\",\n    \"name\": \"<string>\",\n    \"startTime\": \"<long>\",\n    \"endTime\": \"<long>\",\n    \"latitude\": \"<string>\",\n    \"longitude\": \"<string>\",\n    \"maxPlace\": \"<long>\",\n    \"categories\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"done\",\n    \"freePlace\": \"<long>\",\n    \"placeSchema\": \"<string>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"title\": \"<string>\",\n    \"name\": \"<string>\",\n    \"startTime\": \"<long>\",\n    \"endTime\": \"<long>\",\n    \"latitude\": \"<string>\",\n    \"longitude\": \"<string>\",\n    \"maxPlace\": \"<long>\",\n    \"categories\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"inFuture\",\n    \"freePlace\": \"<long>\",\n    \"placeSchema\": \"<string>\"\n  }\n]"
								},
								{
									"id": "72809c9b-e3a7-483b-a262-53bc86d3770e",
									"name": "invalid session",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "sessionToken",
												"value": "<API Key>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/events/my",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"events",
												"my"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"id": "e12634e8-a007-4383-b916-4aab34897dc6"
				},
				{
					"name": "getByCategory",
					"item": [
						{
							"name": "Return list of all events in category",
							"id": "260f128d-0bb7-4a54-b5c3-d3ad0c30d1c9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) ID of category",
										"key": "categoryId",
										"value": "<long>"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/events/getByCategory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"getByCategory"
									]
								}
							},
							"response": [
								{
									"id": "c8616805-6300-4203-b206-8055e72841e4",
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) ID of category",
												"key": "categoryId",
												"value": "<long>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/events/getByCategory",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"events",
												"getByCategory"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"<long>\",\n    \"title\": \"<string>\",\n    \"name\": \"<string>\",\n    \"startTime\": \"<long>\",\n    \"endTime\": \"<long>\",\n    \"latitude\": \"<string>\",\n    \"longitude\": \"<string>\",\n    \"maxPlace\": \"<long>\",\n    \"categories\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"done\",\n    \"freePlace\": \"<long>\",\n    \"placeSchema\": \"<string>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"title\": \"<string>\",\n    \"name\": \"<string>\",\n    \"startTime\": \"<long>\",\n    \"endTime\": \"<long>\",\n    \"latitude\": \"<string>\",\n    \"longitude\": \"<string>\",\n    \"maxPlace\": \"<long>\",\n    \"categories\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"inFuture\",\n    \"freePlace\": \"<long>\",\n    \"placeSchema\": \"<string>\"\n  }\n]"
								},
								{
									"id": "1955eba0-8258-4e4f-8a98-1302480f8821",
									"name": "Invalid category ID supplied",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) ID of category",
												"key": "categoryId",
												"value": "<long>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/events/getByCategory",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"events",
												"getByCategory"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"id": "914b843f-a781-4340-b405-81f0c103eb02"
				},
				{
					"name": "Return list of all events",
					"id": "e421eed7-d5a5-4721-9197-f40c036cbf0d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							]
						}
					},
					"response": [
						{
							"id": "2e84a2c5-fffb-4ec1-9330-3045824b9685",
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"<long>\",\n    \"title\": \"<string>\",\n    \"name\": \"<string>\",\n    \"startTime\": \"<long>\",\n    \"endTime\": \"<long>\",\n    \"latitude\": \"<string>\",\n    \"longitude\": \"<string>\",\n    \"maxPlace\": \"<long>\",\n    \"categories\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"done\",\n    \"freePlace\": \"<long>\",\n    \"placeSchema\": \"<string>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"title\": \"<string>\",\n    \"name\": \"<string>\",\n    \"startTime\": \"<long>\",\n    \"endTime\": \"<long>\",\n    \"latitude\": \"<string>\",\n    \"longitude\": \"<string>\",\n    \"maxPlace\": \"<long>\",\n    \"categories\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"inFuture\",\n    \"freePlace\": \"<long>\",\n    \"placeSchema\": \"<string>\"\n  }\n]"
						}
					]
				},
				{
					"name": "Add new event",
					"id": "7ecc93c3-7837-413a-b150-428c9b5907ae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{sessionToken}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "sessionToken",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"testeEventShouldCreateReserravationsv3333333\",\n  \"name\": \"Jan\",\n  \"startTime\": \"111\",\n  \"endTime\": \"222\",\n  \"latitude\": \"sadf3\",\n  \"longitude\": \"34efs\",\n  \"maxPlace\": \"12\",\n  \"categoriesIds\": [\n   2,\n    3\n  ],\n  \"placeSchema\": \"NO\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							]
						}
					},
					"response": [
						{
							"id": "c55a2357-9480-4c2e-a703-3c17a0aff185",
							"name": "event created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "sessionToken",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"<string>\",\n  \"name\": \"<string>\",\n  \"startTime\": \"<long>\",\n  \"endTime\": \"<long>\",\n  \"latitude\": \"<string>\",\n  \"longitude\": \"<string>\",\n  \"maxPlace\": \"<long>\",\n  \"categoriesIds\": [\n    \"<integer>\",\n    \"<integer>\"\n  ],\n  \"placeSchema\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<long>\",\n  \"title\": \"<string>\",\n  \"name\": \"<string>\",\n  \"startTime\": \"<long>\",\n  \"endTime\": \"<long>\",\n  \"latitude\": \"<string>\",\n  \"longitude\": \"<string>\",\n  \"maxPlace\": \"<long>\",\n  \"categories\": [\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    }\n  ],\n  \"status\": \"inFuture\",\n  \"freePlace\": \"<long>\",\n  \"placeSchema\": \"<string>\"\n}"
						},
						{
							"id": "e7ac91bc-b5c1-4805-b91d-0a66cf3c0094",
							"name": "event can not be created, field invalid",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "sessionToken",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"<string>\",\n  \"name\": \"<string>\",\n  \"startTime\": \"<long>\",\n  \"endTime\": \"<long>\",\n  \"latitude\": \"<string>\",\n  \"longitude\": \"<string>\",\n  \"maxPlace\": \"<long>\",\n  \"categoriesIds\": [\n    \"<integer>\",\n    \"<integer>\"\n  ],\n  \"placeSchema\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"id": "a876f6d9-8e9a-45c3-8aa4-8f5c450732db",
							"name": "invalid session",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "sessionToken",
										"value": "<API Key>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"<string>\",\n  \"name\": \"<string>\",\n  \"startTime\": \"<long>\",\n  \"endTime\": \"<long>\",\n  \"latitude\": \"<string>\",\n  \"longitude\": \"<string>\",\n  \"maxPlace\": \"<long>\",\n  \"categoriesIds\": [\n    \"<integer>\",\n    \"<integer>\"\n  ],\n  \"placeSchema\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"id": "a7e1131a-121e-43ca-9320-aabc6c24149f"
		},
		{
			"name": "categories",
			"item": [
				{
					"name": "Return list of all categories",
					"id": "957b1c43-7ad5-4b5f-b7af-37afd7d3d858",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": [
						{
							"id": "3e52b36b-cda3-4681-8dcf-702bf45feb18",
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  },\n  {\n    \"id\": \"<long>\",\n    \"name\": \"<string>\"\n  }\n]"
						}
					]
				},
				{
					"name": "Create new category",
					"id": "159c95a2-a50a-4878-9659-6da5c18cc00f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{sessionToken}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "sessionToken",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"description": "(Required) name of category",
								"key": "categoryName",
								"value": "test category DO NOT DELETE PLS"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/categories?categoryName=test category DO NOT DELETE PLS",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories"
							],
							"query": [
								{
									"key": "categoryName",
									"value": "test category DO NOT DELETE PLS",
									"type": "text"
								}
							]
						}
					},
					"response": [
						{
							"id": "c5ad6162-8c5b-4aa8-a006-7aad622c06b4",
							"name": "created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) name of category",
										"key": "categoryName",
										"value": "<string>"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "sessionToken",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<long>\",\n  \"name\": \"<string>\"\n}"
						},
						{
							"id": "65d09a18-d46a-4772-8131-6f52d1d022c1",
							"name": "category already exist",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) name of category",
										"key": "categoryName",
										"value": "<string>"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "sessionToken",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"id": "9787d17f-d95d-45d4-9943-f81da23a2e31",
							"name": "invalid session",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) name of category",
										"key": "categoryName",
										"value": "<string>"
									},
									{
										"description": "Added as a part of security scheme: apikey",
										"key": "sessionToken",
										"value": "<API Key>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"categories"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"id": "8ef80618-5b2b-4f6e-b0c1-d81fc8dac1c2"
		},
		{
			"name": "tests",
			"item": [
				{
					"name": "reservation",
					"item": [
						{
							"name": "POST: Create new reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a90e93ad-5d3e-49ce-aa78-27a839421181",
										"exec": [
											"var baseUrl  = 'http://localhost:8080/';\r",
											"\r",
											"(async function() {\r",
											"  try {\r",
											"    console.log(\"---------------------- Tests for POST: Create new reservation: BEGIN ----------------------\");\r",
											"    const categoryId1 = await addCategories('test category'+(new Date()).getTime());\r",
											"    eventId = await createEvent(categoryId1);\r",
											"    // console.log(\"Event ID in main code: \" + eventId);\r",
											"    console.log(\"test 1\");\r",
											"    await test1();\r",
											"    console.log(\"test 2\");\r",
											"    await test2();\r",
											"    console.log(\"test 3\");\r",
											"    await test3();\r",
											"    console.log(\"test 4\");\r",
											"    await test4();\r",
											"    console.log(\"test 5\");\r",
											"    await test5();\r",
											"    console.log(\"test 6\");\r",
											"    await test6();\r",
											"    console.log(\"---------------------- Tests for POST: Create new reservation: END ----------------------\");\r",
											"\r",
											"  } catch (err) {\r",
											"    console.error(err);\r",
											"  }\r",
											"})();\r",
											"\r",
											"function sendRequestAsync(request) {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.sendRequest(request, function(err, response) {\r",
											"      if (err) {\r",
											"        reject(err);\r",
											"      } else {\r",
											"        resolve(response);\r",
											"      }\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"function addCategories(category) {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Create new category\", function () {\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + 'categories?categoryName='+category,\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json'\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"        pm.expect(response.code).to.equal(201);\r",
											"        pm.expect(response.json()).to.have.property('name', category);\r",
											"        pm.expect(response.json().id).to.be.a('number');\r",
											"        resolve(response.json().id);\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"async function createEvent(category) {\r",
											"  var request = {\r",
											"    url: baseUrl+'events',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'sessionToken': pm.environment.get(\"sessionToken\"),\r",
											"        'Content-Type': 'application/json',\r",
											"        'Accept': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            title: 'TEST EVENT FEEL FREEE TO DELETE IT',\r",
											"            name: 'Jan',\r",
											"            startTime: 111,\r",
											"            endTime: 222,\r",
											"            latitude: 'sadf3',\r",
											"            longitude: '34efs',\r",
											"            maxPlace: 5,\r",
											"            categoriesIds: [category],\r",
											"            placeSchema: 'NO'\r",
											"        })\r",
											"    }\r",
											"  };\r",
											"\r",
											"  try {\r",
											"    var response = await sendRequestAsync(request);\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"\r",
											"    var responseBody = response.json();\r",
											"    var eventId = responseBody.id;\r",
											"\r",
											"    return eventId; // Return the eventId here\r",
											"  } catch (err) {\r",
											"    console.error(err);\r",
											"    return null;\r",
											"  }\r",
											"}\r",
											"\r",
											"\r",
											"// Test Case 1: Make reservation with valid event ID and place ID\r",
											"function test1(){\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 1: Make reservation with valid event ID and place ID\", function () {\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl+'reservation',\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json',\r",
											"          'eventId': eventId.toString(),\r",
											"          'placeID': '0'\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"        // console.log(response)\r",
											"        pm.expect(response.code).to.equal(201);\r",
											"        pm.expect(response.json()).to.have.property('reservationToken');\r",
											"        pm.expect(response.json()).to.have.property('placeId', 0);\r",
											"        pm.expect(response.json()).to.have.property('eventId', eventId);\r",
											"        resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"// Test Case 2: Make reservation with invalid event ID\r",
											"async function test2(){\r",
											"    return new Promise((resolve, reject) => {\r",
											"        pm.test(\"Test Case 2: Make reservation with invalid event ID\", function () {\r",
											"            var request = {\r",
											"                method: 'POST',\r",
											"                url: baseUrl+ 'reservation',\r",
											"                header: {\r",
											"                    'Content-Type': 'application/json',\r",
											"                    'Accept': 'application/json',\r",
											"                    'eventId': '-1',\r",
											"                    'placeID': '10'\r",
											"                }\r",
											"            };\r",
											"            pm.sendRequest(request, function (err, response) {\r",
											"                if (err) {\r",
											"                    reject(err);\r",
											"                } else {\r",
											"                    pm.expect(response.code).to.equal(404);\r",
											"                    resolve();\r",
											"                }\r",
											"            });\r",
											"        });\r",
											"    });\r",
											"}\r",
											"\r",
											"\r",
											"// Test Case 3: Make reservation with no free place\r",
											"function test3() {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 3: Make reservation with no free place\", function() {\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + 'reservation',\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json',\r",
											"          'eventId': eventId.toString(),\r",
											"          'placeID': '0'\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function(err, response) {\r",
											"        pm.expect(response.code).to.equal(400);\r",
											"        resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"// Test Case 4: Make reservation with missing event ID header\r",
											"function test4() {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 4: Make reservation with missing event ID header\", function() {\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + 'reservation',\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json',\r",
											"          'placeID': '10'\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function(err, response) {\r",
											"        pm.expect(response.code).to.equal(400);\r",
											"        resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"// Test Case 5: Make reservation with invalid place ID\r",
											"function test5() {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 5: Make reservation with invalid place ID\", function() {\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + 'reservation',\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'eventId': eventId.toString(),\r",
											"          'placeID': '-1'\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function(err, response) {\r",
											"        pm.expect(response.code).to.equal(404);\r",
											"        resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"\r",
											"// Test Case 6: Make reservation with missing headers\r",
											"function test6() {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 6: Make reservation with missing headers\", function () {\r",
											"      var request = {\r",
											"          method: 'POST',\r",
											"          url: baseUrl + 'reservation',\r",
											"          header: {\r",
											"              'Content-Type': 'application/json'\r",
											"          }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"          pm.expect(response.code).to.equal(400);\r",
											"          resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fd0ff2f1-e201-4192-a33f-e08ac2cbef46",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/ping",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"ping"
									]
								}
							},
							"response": []
						},
						{
							"name": "DEL: delete reservation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43bbdca2-bd55-4c98-95f3-2f5b70b7aa50",
										"exec": [
											"var baseUrl  = 'http://localhost:8080/';\r",
											"\r",
											"\r",
											"(async function() {\r",
											"  try {\r",
											"    console.log(\"---------------------- Tests for DEL: delete reservation: BEGIN ----------------------\");\r",
											"    const categoryId1 = await addCategories('test category'+(new Date()).getTime());\r",
											"    var eventIdReservationToken = await createEventAndReservation(categoryId1);\r",
											"    // console.log(\"Event ID in main code: \" + eventIdReservationToken.eventId);\r",
											"    // console.log(\"reservationToken in main code: \" + eventIdReservationToken.reservationToken);\r",
											"    console.log(\"test 1\");\r",
											"    await test1(eventIdReservationToken.reservationToken.toString());\r",
											"    console.log(\"test 2\");\r",
											"    await test2();\r",
											"    console.log(\"test 3\");\r",
											"    await test3();\r",
											"    console.log(\"---------------------- Tests for DEL: delete reservation: END ----------------------\");\r",
											"\r",
											"  } catch (err) {\r",
											"    console.error(err);\r",
											"  }\r",
											"})();\r",
											"\r",
											"function addCategories(category) {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Create new category\", function () {\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + 'categories?categoryName='+category,\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json'\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"        pm.expect(response.code).to.equal(201);\r",
											"        pm.expect(response.json()).to.have.property('name', category);\r",
											"        pm.expect(response.json().id).to.be.a('number');\r",
											"        resolve(response.json().id);\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"function sendRequestAsync(request) {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.sendRequest(request, function(err, response) {\r",
											"      if (err) {\r",
											"        reject(err);\r",
											"      } else {\r",
											"        resolve(response);\r",
											"      }\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"async function createEvent(categoryId1) {\r",
											"  var request = {\r",
											"    url: baseUrl+'events',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'sessionToken': pm.environment.get(\"sessionToken\"),\r",
											"        'Content-Type': 'application/json',\r",
											"        'Accept': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            title: 'TEST EVENT FEEL FREEE TO DELETE IT',\r",
											"            name: 'Jan',\r",
											"            startTime: 111,\r",
											"            endTime: 222,\r",
											"            latitude: 'sadf3',\r",
											"            longitude: '34efs',\r",
											"            maxPlace: 5,\r",
											"            categoriesIds: [categoryId1],\r",
											"            placeSchema: 'NO'\r",
											"        })\r",
											"    }\r",
											"  };\r",
											"\r",
											"  try {\r",
											"    var response = await sendRequestAsync(request);\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"\r",
											"    var responseBody = response.json();\r",
											"    var eventId = responseBody.id;\r",
											"\r",
											"    return eventId; // Return the eventId here\r",
											"  } catch (err) {\r",
											"    console.error(err);\r",
											"    return null;\r",
											"  }\r",
											"}\r",
											"\r",
											"async function createReservation(eventId, placeId) {\r",
											"  var request = {\r",
											"    method: 'POST',\r",
											"    url: baseUrl + 'reservation',\r",
											"    header: {\r",
											"      'Content-Type': 'application/json',\r",
											"      'Accept': 'application/json',\r",
											"      'eventId': eventId.toString(),\r",
											"      'placeID': placeId.toString()\r",
											"    }\r",
											"  };\r",
											"\r",
											"  try {\r",
											"    var response = await sendRequestAsync(request);\r",
											"    pm.expect(response.code).to.equal(201);\r",
											"\r",
											"    var responseBody = response.json();\r",
											"    var reservationToken = responseBody.reservationToken;\r",
											"\r",
											"    return reservationToken;\r",
											"  } catch (err) {\r",
											"    console.error(err);\r",
											"    return null;\r",
											"  }\r",
											"}\r",
											"\r",
											"async function createEventAndReservation(categoryId1) {\r",
											"  var eventId;\r",
											"  var reservationToken;\r",
											"  try {\r",
											"    eventId = await createEvent(categoryId1);\r",
											"    // console.log(\"Event ID : \" + eventId);\r",
											"    reservationToken = await createReservation(eventId, 0); // Replace 0 with the place ID you want to reserve\r",
											"    // console.log(\"Reservation token : \" + reservationToken);\r",
											"    return {\r",
											"      eventId: eventId,\r",
											"      reservationToken: reservationToken\r",
											"    };\r",
											"  } catch (err) {\r",
											"    console.error(err);\r",
											"    return null;\r",
											"  }\r",
											"}\r",
											"\r",
											"// Test Case 1: Delete reservation with valid reservation token\r",
											"function test1(reservationToken) {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 1: Delete reservation with valid reservation token\", function () {\r",
											"      var request = {\r",
											"        method: 'DELETE',\r",
											"        url: baseUrl + 'reservation',\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json',\r",
											"          'reservationToken': reservationToken\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"        pm.expect(response.code).to.equal(204);\r",
											"        resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"// Test Case 2: Delete reservation with invalid reservation token\r",
											"function test2() {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 2: Delete reservation with invalid reservation token\", function () {\r",
											"      var request = {\r",
											"        method: 'DELETE',\r",
											"        url: baseUrl + 'reservation',\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json',\r",
											"          'reservationToken': 'invalid_token'\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"        pm.expect(response.code).to.equal(404);\r",
											"        resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"// Test Case 3: Delete reservation with missing reservationToken header\r",
											"function test3() {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 3: Delete reservation with missing reservationToken header\", function () {\r",
											"      var request = {\r",
											"        method: 'DELETE',\r",
											"        url: baseUrl + 'reservation',\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json'\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"        pm.expect(response.code).to.equal(400);\r",
											"        resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "63ca90e6-9775-4736-a982-8b6b4de7f891",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/ping",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"ping"
									]
								}
							},
							"response": []
						}
					],
					"id": "e80bc321-c7ff-48e4-ae61-c9db4dca20fc"
				},
				{
					"name": "oganizer",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "TODO: POST: Confirm orginizer account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52a33861-1e41-4af5-b5d2-abbb9edc40ae",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "1dc70023-f3f4-446a-af82-8f26a3cc5857",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/ping",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"ping"
											]
										}
									},
									"response": []
								},
								{
									"name": "TODO: DEL: Confirm orginizer account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2bb4b482-e2dc-4f69-8a51-f3648f4da5c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "6854c17e-d692-452a-aacc-575da464e533",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/ping",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"ping"
											]
										}
									},
									"response": []
								},
								{
									"name": "TODO: PATCH: Patch orginizer account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15e76d3f-d643-4a20-a4a3-f665b3f076c2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "15c968c5-fd09-4983-ad45-fa96fce66a55",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/ping",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"id": "a6979851-b002-4d54-8032-819eb3daebd6"
						},
						{
							"name": "login",
							"item": [
								{
									"name": "TODO: GET: Logs organizer into the system",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a723732a-d1e4-434f-b81c-be617385e32a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "912036d3-c2d4-471c-ae16-541e92befd0d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/ping",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"id": "95d9bfde-65ff-406e-87cb-c0c53cad480f"
						},
						{
							"name": "TODO: POST: Create orginizer account",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "863c2183-42bf-42a3-8797-f833076662f3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "1f02df1e-8b73-4786-8e9b-3b54169e52d2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/ping",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"ping"
									]
								}
							},
							"response": []
						},
						{
							"name": "TODO: GET: Get organizer account (my account)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2d438df-59a5-472d-b911-e7b18127b21a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "b4406891-5fbe-400b-92f9-a4a6e0df9c88",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/ping",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"ping"
									]
								}
							},
							"response": []
						}
					],
					"id": "f8585d00-f5ef-45a8-a133-fb90f133ae71"
				},
				{
					"name": "event",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "GET: Find event by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8c812d3-f721-4436-8463-35b5fb21fa68",
												"exec": [
													"var baseUrl  = 'http://localhost:8080/';\r",
													"\r",
													"(async function() {\r",
													"  try {\r",
													"    console.log(\"---------------------- Tests for GET: Find event by ID: BEGIN ----------------------\");\r",
													"    console.log(\"test 1\");\r",
													"    const categoryId1 = await addCategories('test category'+(new Date()).getTime());\r",
													"    await test1(categoryId1);\r",
													"    console.log(\"test 2\");\r",
													"    await test2();\r",
													"    console.log(\"test 3\");\r",
													"    await test3();\r",
													"    console.log(\"---------------------- Tests for GET: Find event by ID: END ----------------------\");\r",
													"\r",
													"  } catch (err) {\r",
													"    console.error(err);\r",
													"  }\r",
													"})();\r",
													"\r",
													"function sendRequestAsync(request) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.sendRequest(request, function(err, response) {\r",
													"      if (err) {\r",
													"        reject(err);\r",
													"      } else {\r",
													"        resolve(response);\r",
													"      }\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"function addCategories(category) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Create new category\", function () {\r",
													"      var request = {\r",
													"        method: 'POST',\r",
													"        url: baseUrl + 'categories?categoryName='+category,\r",
													"        header: {\r",
													"          'Content-Type': 'application/json',\r",
													"          'Accept': 'application/json'\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(request, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(201);\r",
													"        pm.expect(response.json()).to.have.property('name', category);\r",
													"        pm.expect(response.json().id).to.be.a('number');\r",
													"        resolve(response.json().id);\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"// Test Case 1: Get event by ID with valid ID\r",
													"function test1(category) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Test Case 1: Get event by ID with valid ID\", function () {\r",
													"      // Create a new event to get by ID\r",
													"      var createRequest = {\r",
													"        method: 'POST',\r",
													"        url: baseUrl + 'events',\r",
													"        header: {\r",
													"          'Content-Type': 'application/json',\r",
													"          'Accept': 'application/json',\r",
													"          'sessionToken': pm.environment.get(\"sessionToken\")\r",
													"        },\r",
													"        body: {\r",
													"          mode: 'raw',\r",
													"          raw: JSON.stringify({\r",
													"            title: 'Test Event',\r",
													"            name: 'John',\r",
													"            startTime: 1649389200, // January 6, 2023 10:00:00 AM GMT\r",
													"            endTime: 1649392800, // January 6, 2023 11:00:00 AM GMT\r",
													"            latitude: '123.456',\r",
													"            longitude: '78.90',\r",
													"            maxPlace: 10,\r",
													"            categoriesIds: [category],\r",
													"            placeSchema: 'NO'\r",
													"          })\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(createRequest, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(201);\r",
													"\r",
													"        var eventId = response.json().id;\r",
													"        // Get the event by ID\r",
													"        var getRequest = {\r",
													"          method: 'GET',\r",
													"          url: baseUrl + 'events/' + eventId,\r",
													"          header: {\r",
													"            'Accept': 'application/json'\r",
													"          }\r",
													"        };\r",
													"\r",
													"        pm.sendRequest(getRequest, function (err, response) {\r",
													"          pm.expect(response.code).to.equal(200);\r",
													"          pm.expect(response.json()).to.have.property('title', 'Test Event');\r",
													"          pm.expect(response.json()).to.have.property('name', 'John');\r",
													"          pm.expect(response.json()).to.have.property('startTime', 1649389200);\r",
													"          pm.expect(response.json()).to.have.property('endTime', 1649392800);\r",
													"          pm.expect(response.json()).to.have.property('latitude', '123.456');\r",
													"          pm.expect(response.json()).to.have.property('longitude', '78.90');\r",
													"          pm.expect(response.json()).to.have.property('maxPlace', 10);\r",
													"          pm.expect(response.json()).to.have.property('status', 'inFuture');\r",
													"          // pm.expect(response.json()).to.have.property('categoriesIds').that.includes(1);\r",
													"          // pm.expect(response.json()).to.have.property('categoriesIds').that.includes(2);\r",
													"          pm.expect(response.json()).to.have.property('placeSchema', 'NO');\r",
													"          resolve();\r",
													"        });\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"// Test Case 2: Attempt to get event by invalid ID\r",
													"function test2() {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Test Case 2: Attempt to get event by invalid ID\", function () {\r",
													"      var request = {\r",
													"        method: 'GET',\r",
													"        url: baseUrl + 'events/' + 'invalid_id',\r",
													"        header: {\r",
													"          'Accept': 'application/json'\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(request, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(400);\r",
													"        resolve();\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"// Test Case 3: Attempt to get non-existent event\r",
													"function test3() {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Test Case 3: Attempt to get non-existent event\", function () {\r",
													"      var request = {\r",
													"        method: 'GET',\r",
													"        url: baseUrl + 'events/-1', // Use a non-existent event ID\r",
													"        header: {\r",
													"          'Accept': 'application/json'\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(request, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(404);\r",
													"        resolve();\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8a4adccd-e2b5-4431-8ad6-474f6c90746b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/ping",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"ping"
											]
										}
									},
									"response": []
								},
								{
									"name": "DEL: Cancel Event",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c90363e-1c58-4e91-9e71-f43e19ff219e",
												"exec": [
													"var baseUrl  = 'http://localhost:8080/';\r",
													"\r",
													"\r",
													"(async function() {\r",
													"  try {\r",
													"    console.log(\"---------------------- Tests for DEL: Cancel Event: BEGIN ----------------------\");\r",
													"    console.log(\"test 1\");\r",
													"    const categoryId1 = await addCategories('test category'+(new Date()).getTime());\r",
													"    await test1(categoryId1);\r",
													"    console.log(\"test 2\");\r",
													"    await test2();\r",
													"    console.log(\"test 3 (invesetigate)\");\r",
													"    // await test3(categoryId1); // similar BUG, returns 500, but what should it return idk, nothing about it in documentations\r",
													"    console.log(\"---------------------- Tests for DEL: Cancel Event: END ----------------------\");\r",
													"\r",
													"  } catch (err) {\r",
													"    console.error(err);\r",
													"  }\r",
													"})();\r",
													"\r",
													"function sendRequestAsync(request) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.sendRequest(request, function(err, response) {\r",
													"      if (err) {\r",
													"        reject(err);\r",
													"      } else {\r",
													"        resolve(response);\r",
													"      }\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"function addCategories(category) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Create new category\", function () {\r",
													"      var request = {\r",
													"        method: 'POST',\r",
													"        url: baseUrl + 'categories?categoryName='+category,\r",
													"        header: {\r",
													"          'Content-Type': 'application/json',\r",
													"          'Accept': 'application/json'\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(request, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(201);\r",
													"        pm.expect(response.json()).to.have.property('name', category);\r",
													"        pm.expect(response.json().id).to.be.a('number');\r",
													"        resolve(response.json().id);\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"// Test Case 1: Cancel existing event\r",
													"function test1(category) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Test Case 1: Cancel existing event\", function () {\r",
													"      // Create a new event to cancel\r",
													"      var createRequest = {\r",
													"        method: 'POST',\r",
													"        url: baseUrl + 'events',\r",
													"        header: {\r",
													"          'Content-Type': 'application/json',\r",
													"          'Accept': 'application/json',\r",
													"          'sessionToken': pm.environment.get(\"sessionToken\")\r",
													"        },\r",
													"        body: {\r",
													"          mode: 'raw',\r",
													"          raw: JSON.stringify({\r",
													"            title: 'Test Event',\r",
													"            name: 'John',\r",
													"            startTime: 1649389200, // January 6, 2023 10:00:00 AM GMT\r",
													"            endTime: 1649392800, // January 6, 2023 11:00:00 AM GMT\r",
													"            latitude: '123.456',\r",
													"            longitude: '78.90',\r",
													"            maxPlace: 10,\r",
													"            categoriesIds: [category],\r",
													"            placeSchema: 'NO'\r",
													"          })\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(createRequest, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(201);\r",
													"        var eventID = response.json().id;\r",
													"        // Cancel the event\r",
													"        var cancelRequest = {\r",
													"          method: 'DELETE',\r",
													"          url: baseUrl + 'events/' + eventID,\r",
													"          header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'Accept': 'application/json',\r",
													"            'sessionToken': pm.environment.get(\"sessionToken\")\r",
													"          }\r",
													"        };\r",
													"        pm.sendRequest(cancelRequest, function (err, response) {\r",
													"          pm.expect(response.code).to.equal(204);\r",
													"          resolve();\r",
													"        });\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"// Test Case 2: Attempt to cancel non-existing event\r",
													"function test2() {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Test Case 2: Attempt to cancel non-existing event\", function () {\r",
													"      var request = {\r",
													"        method: 'DELETE',\r",
													"        url: baseUrl + 'events/12345', // Non-existing event ID\r",
													"        header: {\r",
													"          'Content-Type': 'application/json',\r",
													"          'Accept': 'application/json',\r",
													"          'sessionToken': pm.environment.get(\"sessionToken\")\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(request, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(404); \r",
													"        resolve();\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"// Test Case 3: Attempt to cancel event with invalid session token\r",
													"function test3(categoryId1) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Test Case 3: Attempt to cancel event with invalid session token\", function () {\r",
													"      // Create a new event to cancel\r",
													"      var createRequest = {\r",
													"        method: 'POST',\r",
													"        url: baseUrl + 'events',\r",
													"        header: {\r",
													"          'Content-Type': 'application/json',\r",
													"          'Accept': 'application/json',\r",
													"          'sessionToken': pm.environment.get(\"sessionToken\")\r",
													"        },\r",
													"        body: {\r",
													"          mode: 'raw',\r",
													"          raw: JSON.stringify({\r",
													"            title: 'Test Event',\r",
													"            name: 'John',\r",
													"            startTime: 1649389200, // January 6, 2023 10:00:00 AM GMT\r",
													"            endTime: 1649392800, // January 6, 2023 11:00:00 AM GMT\r",
													"            latitude: '123.456',\r",
													"            longitude: '78.90',\r",
													"            maxPlace: 10,\r",
													"            categoriesIds: [categoryId1],\r",
													"            placeSchema: 'NO'\r",
													"          })\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(createRequest, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(201);\r",
													"        var eventId = response.json().id;\r",
													"        // Try to cancel the event with an invalid session token\r",
													"        var cancelRequest = {\r",
													"          method: 'DELETE',\r",
													"          url: baseUrl + 'events/' + eventId,\r",
													"          header: {\r",
													"            'Content-Type': 'application/json',\r",
													"            'Accept': 'application/json',\r",
													"            'sessionToken': 'invalidSessionToken'\r",
													"          }\r",
													"        };\r",
													"        pm.sendRequest(cancelRequest, function (err, response) {\r",
													"          pm.expect(response.code).to.equal(404); // Expected response code is 404 (not found)\r",
													"          resolve();\r",
													"        });\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "9eaf9cec-1a06-4e2f-a157-9064075b9380",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/ping",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"ping"
											]
										}
									},
									"response": []
								},
								{
									"name": "TODO: PATCH: patch existing event",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5cc3f34-0b04-4963-be37-ac9d2ad12925",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "db57c0c6-e620-4afa-a997-22964b4bf99d",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/ping",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"id": "ea62ca86-c53a-442c-ac59-f41397467882"
						},
						{
							"name": "my",
							"item": [
								{
									"name": "TODO: GET: Return list of events made by organizer, according to session",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f55b3373-75f7-4624-8a32-72db405488b0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "8e25522b-c11a-48a2-bff8-67f20848eb82",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/ping",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"id": "701d0bf2-d8e2-4a36-8589-7de6e222adaa"
						},
						{
							"name": "getByCategory",
							"item": [
								{
									"name": "GET: Return list of all events in category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c5f627a-c8ed-4eb9-93e2-99575063a369",
												"exec": [
													"var baseUrl  = 'http://localhost:8080/';\r",
													"\r",
													"\r",
													"(async function() {\r",
													"  try {\r",
													"    console.log(\"---------------------- Tests for GET: Return list of all events in category: BEGIN ----------------------\");\r",
													"    const categoryId1 = await addCategories('test category'+(new Date()).getTime());\r",
													"    await CreateEvnetWithCategories(categoryId1);\r",
													"    console.log(\"test 1\");\r",
													"    await test1(categoryId1);\r",
													"    console.log(\"test 2\");\r",
													"    await test2();\r",
													"    console.log(\"---------------------- Tests for GET: Return list of all events in category: END ----------------------\");\r",
													"\r",
													"  } catch (err) {\r",
													"    console.error(err);\r",
													"  }\r",
													"})();\r",
													"\r",
													"function sendRequestAsync(request) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.sendRequest(request, function(err, response) {\r",
													"      if (err) {\r",
													"        reject(err);\r",
													"      } else {\r",
													"        resolve(response);\r",
													"      }\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"function addCategories(category) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Create new category\", function () {\r",
													"      var request = {\r",
													"        method: 'POST',\r",
													"        url: baseUrl + 'categories?categoryName='+category,\r",
													"        header: {\r",
													"          'Content-Type': 'application/json',\r",
													"          'Accept': 'application/json'\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(request, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(201);\r",
													"        pm.expect(response.json()).to.have.property('name', category);\r",
													"        pm.expect(response.json().id).to.be.a('number');\r",
													"        resolve(response.json().id);\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"function CreateEvnetWithCategories(categoryId1) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"CreateEvnetWithCategories\", function () {\r",
													"      var request = {\r",
													"        method: 'POST',\r",
													"        url: baseUrl + 'events',\r",
													"        header: {\r",
													"          'Content-Type': 'application/json',\r",
													"          'Accept': 'application/json',\r",
													"          'sessionToken': pm.environment.get(\"sessionToken\")\r",
													"        },\r",
													"        body: {\r",
													"          mode: 'raw',\r",
													"          raw: JSON.stringify({\r",
													"            title: 'Test Event',\r",
													"            name: 'John',\r",
													"            startTime: 1649389200, // January 6, 2023 10:00:00 AM GMT\r",
													"            endTime: 1649392800, // January 6, 2023 11:00:00 AM GMT\r",
													"            latitude: '123.456',\r",
													"            longitude: '78.90',\r",
													"            maxPlace: 10,\r",
													"            categoriesIds: [categoryId1],\r",
													"            placeSchema: 'NO'\r",
													"          })\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(request, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(201);\r",
													"        pm.expect(response.json()).to.have.property('title', 'Test Event');\r",
													"        pm.expect(response.json()).to.have.property('name', 'John');\r",
													"        pm.expect(response.json()).to.have.property('startTime', 1649389200);\r",
													"        pm.expect(response.json()).to.have.property('endTime', 1649392800);\r",
													"        pm.expect(response.json()).to.have.property('latitude', '123.456');\r",
													"        pm.expect(response.json()).to.have.property('longitude', '78.90');\r",
													"        pm.expect(response.json()).to.have.property('maxPlace', 10);\r",
													"        pm.expect(response.json()).to.have.property('status', 'inFuture');\r",
													"        var categories = response.json().categories;\r",
													"            var categoryIds = categories.map(function (category) {\r",
													"              return category.id;\r",
													"            });\r",
													"        pm.expect(categoryIds).to.include.members([categoryId1]);\r",
													"        pm.expect(response.json()).to.have.property('placeSchema', 'NO');\r",
													"        resolve();\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"\r",
													"// Test Case 1: Get events by category with valid categoryId\r",
													"function test1(categoryId) {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Test Case 1: Get events by category with valid categoryId\", function () {\r",
													"      var request = {\r",
													"        method: 'GET',\r",
													"        url: baseUrl + 'events/getByCategory?categoryId=' + categoryId,\r",
													"        header: {\r",
													"          'Accept': 'application/json'\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(request, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(200);\r",
													"        pm.expect(response.json()).to.be.an('array');\r",
													"        // Check if all events have category with categoryId\r",
													"        var events = response.json();\r",
													"        for (var i = 0; i < events.length; i++) {\r",
													"          var event = events[i];\r",
													"          var hasCategory = false;\r",
													"            var categories = event.categories;\r",
													"            var categoryIds = categories.map(function (category) {\r",
													"              return category.id;\r",
													"            });\r",
													"              pm.expect(categoryIds).to.include(categoryId)\r",
													"        }\r",
													"        resolve();\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													"// Test Case 2: Attempt to get list of events with invalid category ID (eg. string instead of number)\r",
													"function test2() {\r",
													"  return new Promise(function(resolve, reject) {\r",
													"    pm.test(\"Test Case 2: Attempt to get list of events with invalid category ID\", function () {\r",
													"      var categoryId = 'sdf'; // Replace with a valid category ID\r",
													"      var request = {\r",
													"        method: 'GET',\r",
													"        url: baseUrl + 'events/getByCategory?categoryId=' + categoryId,\r",
													"        header: {\r",
													"          'Accept': 'application/json'\r",
													"        }\r",
													"      };\r",
													"      pm.sendRequest(request, function (err, response) {\r",
													"        pm.expect(response.code).to.equal(400);\r",
													"        resolve();\r",
													"      });\r",
													"    });\r",
													"  });\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"id": "b4bce4f5-a898-4fef-994d-99ab3128fb25",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/ping",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"ping"
											]
										}
									},
									"response": []
								}
							],
							"id": "fc0a9d30-420f-4f7f-be8f-8fe6fd6839a9"
						},
						{
							"name": "TODO: GET: Return list of all events",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "07745e1a-b02f-4643-b7b5-5da8948dd901",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cb964882-1c06-45d9-ae68-53bbbd1b3c0a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/ping",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"ping"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST: Add new event",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b25a7a7a-73fa-4d82-9372-463a6dab075a",
										"exec": [
											"var baseUrl  = 'http://localhost:8080/';\r",
											"\r",
											"(async function() {\r",
											"  try {\r",
											"    console.log(\"---------------------- Tests for POST: Add new event: BEGIN ----------------------\");\r",
											"    const categoryId1 = await addCategories('test category'+(new Date()).getTime());\r",
											"    const categoryId2 = await addCategories('test category'+(new Date()).getTime());\r",
											"    console.log(\"test 1\");\r",
											"    await test1(categoryId1, categoryId2);\r",
											"    console.log(\"test 2 (uncomment)\");\r",
											"    // await test2(); // return code is 500, but shoudl be 403\r",
											"    console.log(\"test 3\");\r",
											"    await test3();\r",
											"    console.log(\"test 4\");\r",
											"    await test4();\r",
											"    console.log(\"---------------------- Tests for POST: Add new event: END ----------------------\");\r",
											"\r",
											"  } catch (err) {\r",
											"    console.error(err);\r",
											"  }\r",
											"})();\r",
											"\r",
											"function sendRequestAsync(request) {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.sendRequest(request, function(err, response) {\r",
											"      if (err) {\r",
											"        reject(err);\r",
											"      } else {\r",
											"        resolve(response);\r",
											"      }\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"\r",
											"function addCategories(category) {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Create new category\", function () {\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + 'categories?categoryName='+category,\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json'\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"        pm.expect(response.code).to.equal(201);\r",
											"        pm.expect(response.json()).to.have.property('name', category);\r",
											"        pm.expect(response.json().id).to.be.a('number');\r",
											"        resolve(response.json().id);\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"\r",
											"// Test Case 1: Add event with valid parameters\r",
											"function test1(categoryId1, categoryId2) {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 1: Add event with valid parameters\", function () {\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + 'events',\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json',\r",
											"          'sessionToken': pm.environment.get(\"sessionToken\")\r",
											"        },\r",
											"        body: {\r",
											"          mode: 'raw',\r",
											"          raw: JSON.stringify({\r",
											"            title: 'Test Event',\r",
											"            name: 'John',\r",
											"            startTime: 1649389200, // January 6, 2023 10:00:00 AM GMT\r",
											"            endTime: 1649392800, // January 6, 2023 11:00:00 AM GMT\r",
											"            latitude: '123.456',\r",
											"            longitude: '78.90',\r",
											"            maxPlace: 10,\r",
											"            categoriesIds: [categoryId1, categoryId2],\r",
											"            placeSchema: 'NO'\r",
											"          })\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"        pm.expect(response.code).to.equal(201);\r",
											"        pm.expect(response.json()).to.have.property('title', 'Test Event');\r",
											"        pm.expect(response.json()).to.have.property('name', 'John');\r",
											"        pm.expect(response.json()).to.have.property('startTime', 1649389200);\r",
											"        pm.expect(response.json()).to.have.property('endTime', 1649392800);\r",
											"        pm.expect(response.json()).to.have.property('latitude', '123.456');\r",
											"        pm.expect(response.json()).to.have.property('longitude', '78.90');\r",
											"        pm.expect(response.json()).to.have.property('maxPlace', 10);\r",
											"        pm.expect(response.json()).to.have.property('status', 'inFuture');\r",
											"        var categories = response.json().categories;\r",
											"            var categoryIds = categories.map(function (category) {\r",
											"              return category.id;\r",
											"            });\r",
											"        pm.expect(categoryIds).to.include.members([categoryId1,categoryId2]);\r",
											"        pm.expect(response.json()).to.have.property('placeSchema', 'NO');\r",
											"        resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"// Test Case 2: Add event with invalid session token\r",
											"function test2() {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 2: Add event with invalid session token\", function () {\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + 'events',\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json',\r",
											"          'sessionToken': 'eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJpbzJ0ZXN0bWFpbEBnbWFpbC5jb20iLCJpYXQiOjE2ODA4NzY4NDAsImV4cCI6MTY4MDg3ODI4MH0.2Pp5KPrP2Iz2Zsfw4llHjDbxCGK7lxOJHnb5phfgFAI'\r",
											"        },\r",
											"        body: {\r",
											"          mode: 'raw',\r",
											"          raw: JSON.stringify({\r",
											"            title: 'Test Event',\r",
											"            name: 'John',\r",
											"            startTime: 1649389200, // January 6, 2023 10:00:00 AM GMT\r",
											"            endTime: 1649392800, // January 6, 2023 11:00:00 AM GMT\r",
											"            latitude: '123.456',\r",
											"            longitude: '78.90',\r",
											"            maxPlace: 10,\r",
											"            categoriesIds: [1, 2],\r",
											"            placeSchema: 'NO'\r",
											"          })\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"        pm.expect(response.code).to.equal(403); \r",
											"        resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"// Test Case 3: Add event with missing parameters\r",
											"function test3() {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 3: Add event with missing parameters\", function () {\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + 'events',\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json',\r",
											"          'sessionToken': pm.environment.get(\"sessionToken\")\r",
											"        },\r",
											"        body: {\r",
											"          mode: 'raw',\r",
											"          raw: JSON.stringify({\r",
											"            // title: 'Test Event',\r",
											"            name: 'John',\r",
											"            startTime: 1649389200, // January 6, 2023 10:00:00 AM GMT\r",
											"            endTime: 1649392800, // January 6, 2023 11:00:00 AM GMT\r",
											"            latitude: 'invalid_latitude',\r",
											"            longitude: 'invalid_longitude',\r",
											"            maxPlace: 0, // Invalid value for maxPlace\r",
											"            categoriesIds: [], // Empty array of category IDs\r",
											"            placeSchema: 'invalid_schema'\r",
											"          })\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"        pm.expect(response.code).to.equal(400);\r",
											"        resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"// Test Case 4: Add event with invalid categories\r",
											"function test4(categoryId1, categoryId2) {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 4: Add event with invalid categories\", function () {\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + 'events',\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json',\r",
											"          'sessionToken': pm.environment.get(\"sessionToken\")\r",
											"        },\r",
											"        body: {\r",
											"          mode: 'raw',\r",
											"          raw: JSON.stringify({\r",
											"            title: 'Test Event',\r",
											"            name: 'John',\r",
											"            startTime: 1649389200, // January 6, 2023 10:00:00 AM GMT\r",
											"            endTime: 1649392800, // January 6, 2023 11:00:00 AM GMT\r",
											"            latitude: '123.456',\r",
											"            longitude: '78.90',\r",
											"            maxPlace: 10,\r",
											"            categoriesIds: [-1,1],\r",
											"            placeSchema: 'NO'\r",
											"          })\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"        pm.expect(response.code).to.equal(400);\r",
											"    \r",
											"        resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2b0a3bf0-1d70-40ff-9dd5-4436ef50fed2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/ping",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"ping"
									]
								}
							},
							"response": []
						}
					],
					"id": "52892fa4-e7ee-45f5-8c04-bc2107633995"
				},
				{
					"name": "categories",
					"item": [
						{
							"name": "GET: Return list of all categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2f67f54-91d6-453f-b7af-373c6f2d7aec",
										"exec": [
											"var baseUrl  = 'http://localhost:8080/';\r",
											"\r",
											"\r",
											"(async function() {\r",
											"  try {\r",
											"    console.log(\"---------------------- Tests for GET: Return list of all categories: BEGIN ----------------------\");\r",
											"    console.log(\"test 1\");\r",
											"    await test1();\r",
											"    console.log(\"---------------------- Tests for GET: Return list of all categories: END ----------------------\");\r",
											"\r",
											"  } catch (err) {\r",
											"    console.error(err);\r",
											"  }\r",
											"})();\r",
											"\r",
											"\r",
											"// Test Case 1: Add two categories and then get all categories\r",
											"function test1() {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    // Send first request to create a new category\r",
											"    var category1 = 'category1'+(new Date()).getTime();\r",
											"    var createRequest1 = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + 'categories?categoryName='+category1,\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json'\r",
											"        }\r",
											"      };\r",
											"\r",
											"    pm.sendRequest(createRequest1, function (err, createResponse1) {\r",
											"        pm.expect(createResponse1.code).to.equal(201);\r",
											"        pm.expect(createResponse1.json()).to.have.property('name', category1);\r",
											"        pm.expect(createResponse1.json().id).to.be.a('number');\r",
											"\r",
											"      // Send second request to create a new category\r",
											"      var category2 = 'category2'+(new Date()).getTime();\r",
											"      var createRequest2 = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + 'categories?categoryName='+category2,\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json'\r",
											"        }\r",
											"      };\r",
											"\r",
											"      pm.sendRequest(createRequest2, function (err, createResponse2) {\r",
											"        pm.expect(createResponse2.code).to.equal(201);\r",
											"        pm.expect(createResponse2.json()).to.have.property('name', category2);\r",
											"        pm.expect(createResponse2.json().id).to.be.a('number');\r",
											"\r",
											"        // Send third request to get all categories\r",
											"        var getAllRequest = {\r",
											"          method: 'GET',\r",
											"          url: baseUrl + 'categories',\r",
											"          header: {\r",
											"            'Accept': 'application/json',\r",
											"          },\r",
											"        };\r",
											"\r",
											"        pm.sendRequest(getAllRequest, function (err, getAllResponse) {\r",
											"          pm.test(\"Test Case: Add two categories and then get all categories\", function () {\r",
											"            pm.expect(getAllResponse.code).to.equal(200);\r",
											"            pm.expect(getAllResponse.json()).to.be.an('array').that.has.lengthOf.at.least(2);\r",
											"            var categories = getAllResponse.json();\r",
											"            var categoryNames = categories.map(function (category) {\r",
											"              return category.name;\r",
											"            });\r",
											"             pm.expect(categoryNames).to.include.members([category1,category2]);\r",
											"          });\r",
											"          resolve();\r",
											"        });\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "fee048fd-f637-4962-ad2b-330a8f3417b1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/ping",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"ping"
									]
								}
							},
							"response": []
						},
						{
							"name": "POST: Create new category",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c137476f-88eb-450c-b495-f4bf919404b9",
										"exec": [
											"var baseUrl  = 'http://localhost:8080/';\r",
											"\r",
											"(async function() {\r",
											"  try {\r",
											"    console.log(\"---------------------- Tests for POST: Create new category: BEGIN ----------------------\");\r",
											"    console.log(\"test 1\");\r",
											"    await test1();\r",
											"    console.log(\"test 2\");\r",
											"    await test2();\r",
											"    console.log(\"---------------------- Tests for POST: Create new category: END ----------------------\");\r",
											"\r",
											"  } catch (err) {\r",
											"    console.error(err);\r",
											"  }\r",
											"})();\r",
											"\r",
											"// Test Case 1: Create new category\r",
											"function test1() {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Test Case 1: Create new category\", function () {\r",
											"      var category = 'test category '+(new Date()).getTime();\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + 'categories?categoryName='+category,\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json'\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"        pm.expect(response.code).to.equal(201);\r",
											"        pm.expect(response.json()).to.have.property('name', category);\r",
											"        pm.expect(response.json().id).to.be.a('number');\r",
											"        resolve();\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											"// Test Case 2: Attempt to add an existing category\r",
											"function test2() {\r",
											"  return new Promise(function(resolve, reject) {\r",
											"    pm.test(\"Attempt to add an existing category\", function () {\r",
											"      var categoryName = 'test category'+(new Date()).getTime();\r",
											"      // First, add the category\r",
											"      var request = {\r",
											"        method: 'POST',\r",
											"        url: baseUrl + 'categories?categoryName=' + categoryName,\r",
											"        header: {\r",
											"          'Content-Type': 'application/json',\r",
											"          'Accept': 'application/json'\r",
											"        }\r",
											"      };\r",
											"      pm.sendRequest(request, function (err, response) {\r",
											"        pm.expect(response.code).to.equal(201);\r",
											"\r",
											"        // Now try to add the same category again\r",
											"        var request = {\r",
											"          method: 'POST',\r",
											"          url: baseUrl + 'categories?categoryName=' + categoryName,\r",
											"          header: {\r",
											"            'Content-Type': 'application/json',\r",
											"            'Accept': 'application/json'\r",
											"          }\r",
											"        };\r",
											"        pm.sendRequest(request, function (err, response) {\r",
											"          pm.expect(response.code).to.equal(400);\r",
											"          resolve();\r",
											"        });\r",
											"      });\r",
											"    });\r",
											"  });\r",
											"}\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "39aee6ff-615b-47c4-a6a2-3b72e07cc927",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/ping",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"ping"
									]
								}
							},
							"response": []
						}
					],
					"id": "2abdcea3-239d-4d10-9735-8aed2adb6848"
				},
				{
					"name": "get and set session token to env variable",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a898661-5ed2-4185-a63c-7e9e9cbcbf93",
								"exec": [
									"const baseUrl = 'http://localhost:8080/';\r",
									"\r",
									"// Test Case: Organizer login\r",
									"function testLogin() {\r",
									"  return new Promise(function(resolve, reject) {\r",
									"    var request = {\r",
									"      method: 'GET',\r",
									"      url: baseUrl + 'organizer/login',\r",
									"      header: {\r",
									"        'Accept': 'application/json',\r",
									"        'Content-Type': 'application/json',\r",
									"        'email': 'io2testmail@gmail.com',\r",
									"        'password': '123'\r",
									"      }\r",
									"    };\r",
									"    pm.sendRequest(request, function (err, response) {\r",
									"      pm.expect(response.code).to.equal(200);\r",
									"      pm.expect(response.json().sessionToken).to.be.a('string');\r",
									"      pm.environment.set('sessionToken', response.json().sessionToken);\r",
									"      resolve();\r",
									"    });\r",
									"  });\r",
									"}\r",
									"\r",
									"pm.test('Organizer login', testLogin);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b1351d6e-7108-4a00-80ef-c3a874c364f1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/ping",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"ping"
							]
						}
					},
					"response": []
				}
			],
			"id": "f66a252c-ef14-4b1e-ab1a-105aa120bf35"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e0b46c51-4022-4188-a551-c36efc8e58a3",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "114f3946-4c60-46c7-ae60-a28243c623ca",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "78bc2694-84a1-4a16-9d1b-9b9a42a59092",
			"key": "baseUrl",
			"value": "http://localhost:8080"
		}
	]
}